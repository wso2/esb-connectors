<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (c) 2005-2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

   WSO2 Inc. licenses this file to you under the Apache License,
   Version 2.0 (the "License"); you may not use this file except
   in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied. See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<!-- API Doc: https://developers.podio.com/doc/tasks/get-tasks-77949 -->
<template name="listTasks" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="grouping" description="The group name"/>
    <parameter name="app" description="The application name"/>
    <parameter name="completed" description="If true retrieve only completed tasks"/>
    <parameter name="completedBy" description="The name of assignee"/>
    <parameter name="completedOn" description="The completed date"/>
    <parameter name="createdBy" description="The name of the ticket creater"/>
    <parameter name="createdOn" description="The created date"/>
    <parameter name="createdVia" description="The id of the client the task was created via"/>
    <parameter name="dueDate" description="The dueDate"/>
    <parameter name="externalId" description="The external id of the task"/>
    <parameter name="files" description="True if there should be files on the task"/>
    <parameter name="label" description="The id of the a required label on the tasks"/>
    <parameter name="limit" description="The maximum number of tasks to return"/>
    <parameter name="offset" description="The offset into the tasks to return"/>
    <parameter name="org" description="The ids of the orgs the tasks are related to."/>
    <parameter name="reassigned" description="True to only return tasks the active user has assigned to someone else"/>
    <parameter name="reference" description="The list of references on the form "/>
    <parameter name="responsible" description="The user ids that are responsible for the task"/>
    <parameter name="sortBy" description="The sort order of the tasks"/>
    <parameter name="sortDesc" description="true if tasks should be sorted descending"/>
    <parameter name="space" description="The ids of the spaces the tasks are related to"/>
    <parameter name="view" description="The level of information to return"/>
    <sequence>
        <property name="uri.var.grouping" expression="$func:grouping"/>
        <property name="uri.var.app" expression="$func:app"/>
        <property name="uri.var.completed" expression="$func:completed"/>
        <property name="uri.var.completedBy" expression="$func:completedBy"/>
        <property name="uri.var.completedOn" expression="$func:completedOn"/>
        <property name="uri.var.createdBy" expression="$func:createdBy"/>
        <property name="uri.var.createdOn" expression="$func:createdOn"/>
        <property name="uri.var.createdVia" expression="$func:createdVia"/>
        <property name="uri.var.dueDate" expression="$func:dueDate"/>
        <property name="uri.var.externalId" expression="$func:externalId"/>
        <property name="uri.var.files" expression="$func:files"/>
        <property name="uri.var.label" expression="$func:label"/>
        <property name="uri.var.limit" expression="$func:limit"/>
        <property name="uri.var.offset" expression="$func:offset"/>
        <property name="uri.var.org" expression="$func:org"/>
        <property name="uri.var.reassigned" expression="$func:reassigned"/>
        <property name="uri.var.reference" expression="$func:reference"/>
        <property name="uri.var.responsible" expression="$func:responsible"/>
        <property name="uri.var.sortBy" expression="$func:sortBy"/>
        <property name="uri.var.sortDesc" expression="$func:sortDesc"/>
        <property name="uri.var.space" expression="$func:space"/>
        <property name="uri.var.view" expression="$func:view"/>
        <property name="uri.var.urlQuery" value=""/>
        <script language="js">
            <![CDATA[
            var grouping = mc.getProperty('uri.var.grouping');
            var app = mc.getProperty('uri.var.app');
            var completed = mc.getProperty('uri.var.completed');
            var completedBy = mc.getProperty('uri.var.completedBy');
            var completedOn = mc.getProperty('uri.var.completedOn');
            var createdBy = mc.getProperty('uri.var.createdBy');
            var createdOn = mc.getProperty('uri.var.createdOn');
            var createdVia = mc.getProperty('uri.var.createdVia');
            var dueDate = mc.getProperty('uri.var.dueDate');
            var externalId = mc.getProperty('uri.var.externalId');
            var files = mc.getProperty('uri.var.files');
            var label = mc.getProperty('uri.var.label');
            var limit = mc.getProperty('uri.var.limit');
            var offset = mc.getProperty('uri.var.offset');
            var org = mc.getProperty('uri.var.org');
            var reassigned = mc.getProperty('uri.var.reassigned');
            var reference = mc.getProperty('uri.var.reference');
            var responsible = mc.getProperty('uri.var.responsible');
            var sortBy = mc.getProperty('uri.var.sortBy');
            var sortDesc = mc.getProperty('uri.var.sortDesc');
            var space = mc.getProperty('uri.var.space');
            var view = mc.getProperty('uri.var.view');
            var urlQuery = "";
            if (grouping != null && grouping != "") {
               urlQuery += "grouping=" + grouping + '&';
            }
            if (app != null && app != "") {
               urlQuery += "app=" + app + '&';
            }
            if (completed != null && completed != "") {
               urlQuery += "completed=" + completed + '&';
            }
            if (completedBy != null && completedBy != "") {
               urlQuery += "completed_by=" + completedBy + '&';
            }
            if (completedOn != null && completedOn != "") {
               urlQuery += "completed_on=" + completedOn + '&';
            }
            if (createdBy != null && createdBy != "") {
               urlQuery += "created_by=" + createdBy + '&';
            }
            if (createdOn != null && createdOn != "") {
               urlQuery += "created_on=" + createdOn + '&';
            }
            if (createdVia != null && createdVia != "") {
               urlQuery += "created_via=" + createdVia + '&';
            }
            if (dueDate != null && dueDate != "") {
               urlQuery += "due_date=" + dueDate + '&';
            }
            if (externalId != null && externalId != "") {
               urlQuery += "external_id=" + externalId + '&';
            }
            if (files != null && files != "") {
               urlQuery += "files=" + files + '&';
            }
            if (label != null && label != "") {
               urlQuery += "label=" + label + '&';
            }
            if (limit != null && limit != "") {
               urlQuery += "limit=" + limit + '&';
            }
            if (org != null && org != "") {
               urlQuery += "org=" + org + '&';
            }
            if (reassigned != null && reassigned != "") {
               urlQuery += "reassigned=" + reassigned + '&';
            }
            if (reference != null && reference != "") {
               urlQuery += "reference=" + reference + '&';
            }
            if (responsible != null && responsible != "") {
               urlQuery += "responsible=" + responsible + '&';
            }
            if (sortBy != null && sortBy != "") {
               urlQuery += "sort_by=" + sortBy + '&';
            }
            if (sortDesc != null && sortDesc != "") {
               urlQuery += "sort_desc=" + sortDesc + '&';
            }
            if (space != null && space != "") {
               urlQuery += "space=" + space + '&';
            }
            if (view != null && view != "") {
               urlQuery += "view=" + view + '&';
            }
            if (offset != null && offset != "") {
               urlQuery += "offset=" + offset + '&';
            }
            if (urlQuery != "") {
               urlQuery = '?' + urlQuery.substring(0, urlQuery.length - 1);
               mc.setProperty('uri.var.urlQuery', urlQuery);
            } 
         ]]>
        </script>
        <call>
            <endpoint>
                <http method="get" uri-template="{uri.var.apiUrl}/task{uri.var.urlQuery}"/>
            </endpoint>
        </call>
        <!-- Remove response custom header information -->
        <header name="X-Podio-Auth-Ref" scope="transport" action="remove"/>
        <header name="X-Podio-Request-Id" scope="transport" action="remove"/>
        <header name="X-Rate-Limit-Limit" scope="transport" action="remove"/>
        <header name="X-Rate-Limit-Remaining" scope="transport" action="remove"/>
        <header name="X-Served-By" scope="transport" action="remove"/>
    </sequence>
</template>