<template name="patchCalendarEntry" xmlns="http://ws.apache.org/ns/synapse">

  <!-- Required parameters -->
   <parameter name="calendarId" description="The calendarId"/> 
   
  <!-- Optional parameters -->
  <parameter name="fields" description="Selector specifying which fields to include in a partial response."/>    
  <parameter name="isColorRgbFormat" description="Whether to use the 'foregroundColor' and 'backgroundColor' fields to write the calendar colors (RGB)."/>  
  <parameter name="backgroundColor" description="The main color of the calendar in the format '#0088aa'."/>  
  <parameter name="colorId" description="An ID referring to an entry in the calendar section of the colors definition."/>       
  <parameter name="defaultReminders" description="A list of authenticated users for this calendar. Each item has method and minutes."/>    
  <parameter name="etag" description="ETag of the resource."/>   
  <parameter name="foregroundColor" description="The foreground color of the calendar in the format '#ffffff'."/> 
  <parameter name="isHidden" description="Whether the calendar has been hidden from the list."/>     
  <parameter name="id" description="Identifier of the calendar."/>  
  <parameter name="kind" description="Type of the resource 'calendar#calendarListEntry'."/>   
  <parameter name="notificationSettings" description="The method used to deliver the notification. " />  
  <parameter name="isSelected" description="Whether the calendar content shows up in the calendar UI"/>        
  <parameter name="summaryOverride" description="The summary that the authenticated user has set for this calendar."/>    
       
  <sequence>
    <property name="uri.var.calendarId" expression="$func:calendarId"/>    
    <property name="uri.var.fields" expression="$func:fields"/>
    <property name="uri.var.isColorRgbFormat" expression="$func:isColorRgbFormat"/>   
    <property name="uri.var.backgroundColor" expression="$func:backgroundColor"/>
    <property name="uri.var.colorId" expression="$func:colorId"/>  
    <property name="uri.var.defaultReminders" expression="$func:defaultReminders"/>   
    <property name="uri.var.etag" expression="$func:etag"/> 
    <property name="uri.var.foregroundColor" expression="$func:foregroundColor"/>  
    <property name="uri.var.isHidden" expression="$func:isHidden" />
    <property name="uri.var.id" expression="$func:id"/>  
    <property name="uri.var.kind" expression="$func:kind"/>   
	<property name="uri.var.notificationSettings" expression="$func:notificationSettings" />          
    <property name="uri.var.isSelected" expression="$func:isSelected" />   
    <property name="uri.var.summaryOverride" expression="$func:summaryOverride"/>              	
	<!-- Building request with mandatory params -->
		<payloadFactory media-type="json">
			<format>
				{
					
				}
			</format>
		</payloadFactory>
	
		<script language="js">
        	<![CDATA[
        		
        		//url param variables
		        var isColorRgbFormat = mc.getProperty("uri.var.isColorRgbFormat");
		        var fields = mc.getProperty("uri.var.fields");
		        var calendarId= encodeURIComponent(mc.getProperty("uri.var.calendarId"));
		        		        
		        //request body param variables				
				var backgroundColor = mc.getProperty("uri.var.backgroundColor");		       
		        var colorId = mc.getProperty("uri.var.colorId");
		        var defaultReminders = mc.getProperty("uri.var.defaultReminders");				
				var etag = mc.getProperty("uri.var.etag");				
		        var foregroundColor = mc.getProperty("uri.var.foregroundColor");
		        var isHidden = mc.getProperty("uri.var.isHidden");
				var id = mc.getProperty("uri.var.id");
				var kind = mc.getProperty("uri.var.kind"); 				
		        var notificationSettings = mc.getProperty("uri.var.notificationSettings"); 							
		        var isSelected = mc.getProperty("uri.var.isSelected");							
		        var summaryOverride = mc.getProperty("uri.var.summaryOverride");						        
		       	
		       	//url param processing start
		       	mc.setProperty('uri.var.calendarId', calendarId);
		        var urlParamString = '';
		           
				if (isColorRgbFormat != null && isColorRgbFormat != "") {
					urlParamString = '&colorRgbFormat=' + encodeURIComponent(isColorRgbFormat);
				}				
				
				if (fields != null && fields != "") {
					urlParamString += '&fields=' + encodeURIComponent(fields);
				}
									
				if(urlParamString != '') {
					urlParamString = '?' + urlParamString.substring(1);
				}
				
				mc.setProperty('uri.var.urlParamString', urlParamString);
				//url param processing end
				
				//request body param processing start
				var payload = mc.getPayloadJSON();
													
				if (backgroundColor != null && backgroundColor != "") {
					payload.backgroundColor = backgroundColor;
				}
				
				if (colorId != null && colorId != "") {
					payload.colorId = colorId;
				}

				if (defaultReminders != null && defaultReminders != "" ) { // if empty, remove optional defaultReminders JSON Obj 				
					payload.defaultReminders = eval("("+defaultReminders+")"); 				
				}

				if (etag != null && etag != "") {
					payload.etag= etag;
				}				
				
				if (foregroundColor != null && foregroundColor != "") {
					payload.foregroundColor = foregroundColor;
				}				
				
				if (isHidden != null && isHidden != "") {
					payload.hidden = isHidden;
				}	
				
				if (id != null && id != "") {
					payload.id = id;
				}
				
				if (kind != null && kind != "") {
					payload.kind= kind;
				}
				
				if (notificationSettings != null  && notificationSettings != "") { // if empty, remove optional notificationSettings JSON Obj 				
					payload.notificationSettings = eval("("+notificationSettings+")");			
				}				
				
				if (isSelected != null && isSelected != "") {
					payload.selected = isSelected; 
				}		
				
				if (summaryOverride != null && summaryOverride != "") {
					payload.summaryOverride = summaryOverride;
				}				
												
				mc.setPayloadJSON(payload);
				//request body param processing end
				
			]]>
		</script>

		<call>
			<endpoint>
				<http method="patch"
					uri-template="{uri.var.apiUrl}/calendar/v3/users/me/calendarList/{uri.var.calendarId}{uri.var.urlParamString}" />
			</endpoint>
		</call>

		<!-- Remove response custom header information -->
		<header name="X-Frame-Options" scope="transport" action="remove" />
		<header name="X-XSS-Protection" scope="transport" action="remove" />
		<header name="Alternate-Protocol" scope="transport" action="remove" />
		<header name="X-Content-Type-Options" scope="transport" action="remove" />

	</sequence>
</template>