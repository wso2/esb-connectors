<template name="listEvents" xmlns="http://ws.apache.org/ns/synapse">
  <!-- Required parameters -->
  <parameter name="calendarId" description="Calendar Identifier"/>
  <!-- Optional parameters -->
  <parameter name="alwaysIncludeEmail" description="Whether to always include a value in the 'email' field for the organizer"/>
  <parameter name="iCalUID" description="Specifies iCalendar UID"/>
  <parameter name="maxAttendees" description="The maximum number of attendees to include in the response"/>
  <parameter name="maxResults" description="Maximum number of events returned on one result page"/>
  <parameter name="orderBy" description="The order of the events returned in the result"/>
  <parameter name="pageToken" description="Token specifying which result page to return"/>
  <parameter name="privateExtendedProperty" description="Extended properties constraint"/>
  <parameter name="q" description="Free text search terms to find events"/>
  <parameter name="sharedExtendedProperty" description="Extended properties constraint"/>
  <parameter name="showDeleted" description="Whether to include deleted events in the result"/>
  <parameter name="showHiddenInvitations" description="Whether to include hidden invitations in the result"/>
  <parameter name="singleEvents" description="Whether to expand recurring events into instances"/>
  <parameter name="timeMax" description="Upper bound for an event's start time to filter by"/>
  <parameter name="timeMin" description="Lower bound for an event's end time to filter by"/>
  <parameter name="timeZone" description="Time zone used in the response, defaults to the time zone of the calendar"/>
  <parameter name="updatedMin" description="Lower bound for an event's last modification time"/>
  <parameter name="fields" description="specifies which fields to include in a partial response,
						if not specified in default will provide all fields in responce"/>
  <sequence>
    <property name="uri.var.calendarId" expression="$func:calendarId"/>
    <property name="uri.var.alwaysIncludeEmail" expression="$func:alwaysIncludeEmail" />
    <property name="uri.var.iCalUID" expression="$func:iCalUID"/>
    <property name="uri.var.orderBy" expression="$func:orderBy"/>
    <property name="uri.var.pageToken" expression="$func:pageToken"/>
    <property name="uri.var.privateExtendedProperty" expression="$func:privateExtendedProperty"/>
    <property name="uri.var.q" expression="$func:q"/>
    <property name="uri.var.sharedExtendedProperty" expression="$func:sharedExtendedProperty"/>
    <property name="uri.var.showDeleted" expression="$func:showDeleted" type="BOOLEAN"/>
    <property name="uri.var.showHiddenInvitations" expression="$func:showHiddenInvitations" />
    <property name="uri.var.singleEvents" expression="$func:singleEvents" />
    <property name="uri.var.timeMax" expression="$func:timeMax"/>
    <property name="uri.var.timeMin" expression="$func:timeMin"/>
    <property name="uri.var.timeZone" expression="$func:timeZone"/>
    <property name="uri.var.updatedMin" expression="$func:updatedMin"/>
    <property name="uri.var.fields" expression="$func:fields"/>
    <property name="uri.var.maxAttendees" expression="$func:maxAttendees"/>
	<property name="uri.var.maxResults" expression="$func:maxResults"/>

  	<script language="js">
  		<![CDATA[
  		
  			//url param variables
  			var calendarId = encodeURIComponent(mc.getProperty("uri.var.calendarId"));
  			var alwaysIncludeEmail = mc.getProperty('uri.var.alwaysIncludeEmail');
			var iCalUID = mc.getProperty('uri.var.iCalUID');
			var maxAttendees = mc.getProperty('uri.var.maxAttendees');
			var maxResults = mc.getProperty('uri.var.maxResults');
			var orderBy = mc.getProperty('uri.var.orderBy');
			var pageToken = mc.getProperty('uri.var.pageToken');
			var privateExtendedProperty = mc.getProperty('uri.var.privateExtendedProperty');
			var q = mc.getProperty('uri.var.q');
			var sharedExtendedProperty = mc.getProperty('uri.var.sharedExtendedProperty');
			var showDeleted = mc.getProperty('uri.var.showDeleted');
			var showHiddenInvitations = mc.getProperty('uri.var.showHiddenInvitations');
			var singleEvents = mc.getProperty('uri.var.singleEvents');
			var timeMax = mc.getProperty('uri.var.timeMax');
			var timeMin = mc.getProperty('uri.var.timeMin');
			var timeZone = mc.getProperty('uri.var.timeZone');
			var updatedMin = mc.getProperty('uri.var.updatedMin');
			var fields = mc.getProperty('uri.var.fields');
			
			//url param processing start				
			mc.setProperty('uri.var.calendarId', calendarId);
			var uriParams = '';
			
			if (alwaysIncludeEmail != null && alwaysIncludeEmail != "") {
				uriParams = '&alwaysIncludeEmail=' + encodeURIComponent(alwaysIncludeEmail);
			}
			
			if (iCalUID != null && iCalUID != "") {
				uriParams += '&iCalUID=' + encodeURIComponent(iCalUID);
			}
			
			if (maxAttendees != null && maxAttendees != "") {
				uriParams += '&maxAttendees=' + maxAttendees;
			}
			
			if (maxResults != null && maxResults != "") {
				uriParams += '&maxResults=' + maxResults;
			}
			
			if (orderBy != null && orderBy != "") {
				uriParams += '&orderBy=' + encodeURIComponent(orderBy);
			}
			
			if (pageToken != null && pageToken != "") {
				uriParams += '&pageToken=' + encodeURIComponent(pageToken);
			}
			
			if (privateExtendedProperty != null && privateExtendedProperty != "") {
				uriParams += '&privateExtendedProperty=' + encodeURIComponent(privateExtendedProperty);
			}
			
			if (q != null && q != "") {
				uriParams += '&q=' + encodeURIComponent(q);
			}
			
			if (sharedExtendedProperty != null && sharedExtendedProperty != "") {
				uriParams += '&sharedExtendedProperty=' + encodeURIComponent(sharedExtendedProperty);
			}
			
			if (showDeleted != null && showDeleted != "") {
				uriParams += '&showDeleted=' + encodeURIComponent(showDeleted);
			}
			
			if (showHiddenInvitations != null && showHiddenInvitations != "") {
				uriParams += '&showHiddenInvitations=' + encodeURIComponent(showHiddenInvitations);
			}
			
			if (singleEvents != null && singleEvents != "") {
				uriParams += '&singleEvents=' + encodeURIComponent(singleEvents);
			}
			
			if (timeMax != null && timeMax != "") {
				uriParams += '&timeMax=' + encodeURIComponent(timeMax);
			}
			
			if (timeMin != null && timeMin != "") {
				uriParams += '&timeMin=' + encodeURIComponent(timeMin);
			}
			
			if (timeZone != null && timeZone != "") {
				uriParams += '&timeZone=' + encodeURIComponent(timeZone);
			}
			
			if (updatedMin != null && updatedMin != "") {
				uriParams += '&updatedMin=' + encodeURIComponent(updatedMin);
			}
			
			if (fields != null && fields != "") {
				uriParams += '&fields=' + encodeURIComponent(fields);
			}  	
				
  			if(uriParams != '') {
  				uriParams = '?' + uriParams.substring(1);  				
  			}
  			
  			mc.setProperty('uri.var.encodedUriParams', uriParams);
  			//url param processing end
  		
  		]]>  	
  	</script>
	
    <call>
      <endpoint>
        <http method="get" uri-template="{uri.var.apiUrl}/calendar/v3/calendars/{uri.var.calendarId}/events{uri.var.encodedUriParams}"/>
      </endpoint>
    </call>
    
    <!-- Remove response's custom header information -->
	<header name="X-Frame-Options" scope="transport" action="remove" />
	<header name="X-XSS-Protection" scope="transport" action="remove" />
	<header name="Alternate-Protocol" scope="transport" action="remove" />
	<header name="X-Content-Type-Options" scope="transport" action="remove" />
	
  </sequence>
</template>