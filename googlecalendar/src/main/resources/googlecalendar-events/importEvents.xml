<template name="importEvents" xmlns="http://ws.apache.org/ns/synapse">

	<!-- Required parameters -->
	<parameter name="calendarId" description="Calendar identifier." />

	<!-- Optional parameters -->
	<parameter name="fields" description="Selector specifying which fields to include in a partial response." />
	<parameter name="anyoneCanAddSelf" description="Whether anyone can invite themselves to the event." />
	<parameter name="attendeesOmitted" 
	description="Whether attendees may have been omitted from the event's representation." />
	<parameter name="attendees" description="The attendees of the event." />
	<parameter name="colorId" description="The color of the event." />
	<parameter name="description" description="Description of the event." />
	<parameter name="end" description="The (exclusive) end time of the event." />
	<parameter name="endTimeUnspecified" description="Whether the end time is actually unspecified." />
	<parameter name="etag" description="ETag of the resource." />
	<parameter name="extendedProperties" description="Extended properties of the event." />
	<parameter name="gadget" description="A gadget that extends this event." />
	<parameter name="guestsCanInviteOthers" 
	description="Whether attendees other than the organizer can invite others to the event." />
	<parameter name="guestsCanSeeOtherGuests" 
	description="Whether attendees other than the organizer can see who the event's attendees are." />
	<parameter name="iCalUID" description="Event ID in the iCalendar format." />
	<parameter name="id" description="Identifier of the event." />
	<parameter name="kind" description="Type of the resource ('calendar#event')." />
	<parameter name="location" description="Geographic location of the event as free-form text." />
	<parameter name="originalStartTime" description="this is the time at which this event would start." />
	<parameter name="privateCopy" 
	description="Whether this is a private event copy where changes are not shared with other copies on other calendars." />
	<parameter name="recurrence" 
	description="List of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event." />
	<parameter name="recurringEventId" description="This is the event ID of the recurring event itself." />
	<parameter name="reminders" 
	description="Information about the event's reminders for the authenticated user." />
	<parameter name="sequence" description="Sequence number as per iCalendar." />
	<parameter name="source" description="Source of an event from which it was created." />
	<parameter name="start" description="The (inclusive) start time of the event." />
	<parameter name="status" description="Status of the event." />
	<parameter name="summary" description="Title of the event." />
	<parameter name="transparency" description="Whether the event blocks time on the calendar." />
	<parameter name="visibility" description="Visibility of the event." />
	
	<sequence>
		
		<property name="uri.var.calendarId" expression="$func:calendarId" />
		<property name="uri.var.fields" expression="$func:fields" />
		<property name="uri.var.anyoneCanAddSelf" expression="$func:anyoneCanAddSelf" />
		<property name="uri.var.attendeesOmitted" expression="$func:attendeesOmitted" />
		<property name="uri.var.attendees" expression="$func:attendees" />
		<property name="uri.var.colorId" expression="$func:colorId" />
		<property name="uri.var.description" expression="$func:description" />
		<property name="uri.var.end" expression="$func:end" />
		<property name="uri.var.endTimeUnspecified" expression="$func:endTimeUnspecified" />
		<property name="uri.var.etag" expression="$func:etag" />
		<property name="uri.var.extendedProperties" expression="$func:extendedProperties" />
		<property name="uri.var.gadget" expression="$func:gadget" />
		<property name="uri.var.guestsCanInviteOthers" expression="$func:guestsCanInviteOthers" />
		<property name="uri.var.guestsCanSeeOtherGuests" expression="$func:guestsCanSeeOtherGuests" />
		<property name="uri.var.iCalUID" expression="$func:iCalUID" />
		<property name="uri.var.id" expression="$func:id" />
		<property name="uri.var.kind" expression="$func:kind" />
		<property name="uri.var.location" expression="$func:location" />
		<property name="uri.var.originalStartTime" expression="$func:originalStartTime" />
		<property name="uri.var.privateCopy" expression="$func:privateCopy" />
		<property name="uri.var.recurrence" expression="$func:recurrence" />
		<property name="uri.var.recurringEventId" expression="$func:recurringEventId" />
		<property name="uri.var.reminders" expression="$func:reminders" />
		<property name="uri.var.source" expression="$func:source" />
		<property name="uri.var.start" expression="$func:start" />
		<property name="uri.var.status" expression="$func:status" />
		<property name="uri.var.summary" expression="$func:summary" />
		<property name="uri.var.transparency" expression="$func:transparency" />
		<property name="uri.var.visibility" expression="$func:visibility" />
		
		<!-- Optional parameter with type integer -->
		<filter source="boolean($func:sequence)" regex="true">
			<then>
				<property name="uri.var.sequence" expression="$func:sequence" type="INTEGER" />
			</then>
		</filter>
		
		<!-- Building request with mandatory params -->
		<payloadFactory media-type="json">
			<format>
				{
					"end": $1,
					"iCalUID":"$2",
					"start": $3
				}
			</format>
			<args>
				<arg expression="get-property('uri.var.end')" />
				<arg expression="get-property('uri.var.iCalUID')" />
				<arg expression="get-property('uri.var.start')" />
			</args>
		</payloadFactory>
		
		<script language="js">
        	<![CDATA[
				
				//url param variables				
				var calendarId = encodeURIComponent(mc.getProperty("uri.var.calendarId"));
		        var fields = mc.getProperty("uri.var.fields");
		        
		        //request body param variables
		        var anyoneCanAddSelf = mc.getProperty("uri.var.anyoneCanAddSelf");
		        var attendeesOmitted = mc.getProperty("uri.var.attendeesOmitted");
		        var attendees = mc.getProperty("uri.var.attendees");
		        var colorId = mc.getProperty("uri.var.colorId");
		        var description = mc.getProperty("uri.var.description");
		        var endTimeUnspecified = mc.getProperty("uri.var.endTimeUnspecified");
		        var etag = mc.getProperty("uri.var.etag");
		        var extendedProperties = mc.getProperty("uri.var.extendedProperties");
		        var gadget = mc.getProperty("uri.var.gadget");
		        var guestsCanInviteOthers = mc.getProperty("uri.var.guestsCanInviteOthers");
		        var guestsCanSeeOtherGuests = mc.getProperty("uri.var.guestsCanSeeOtherGuests");
		        var id = mc.getProperty("uri.var.id");
		        var kind = mc.getProperty("uri.var.kind");
		        var location = mc.getProperty("uri.var.location");
		        var originalStartTime = mc.getProperty("uri.var.originalStartTime");
		        var privateCopy = mc.getProperty("uri.var.privateCopy");
		        var recurrence = mc.getProperty("uri.var.recurrence");
		        var recurringEventId = mc.getProperty("uri.var.recurringEventId");
		        var reminders = mc.getProperty("uri.var.reminders");
		        var sequence = mc.getProperty("uri.var.sequence");
		        var source = mc.getProperty("uri.var.source");
		        var status = mc.getProperty("uri.var.status");
		        var summary = mc.getProperty("uri.var.summary");
		        var transparency = mc.getProperty("uri.var.transparency");
		        var visibility = mc.getProperty("uri.var.visibility");
		        
		        //url param processing start
		        mc.setProperty('uri.var.calendarId', calendarId);
		        var urlParamString = '';
		           
				if (fields != null && fields != "") {
					urlParamString = '?fields=' + encodeURIComponent(fields);
				}
				
				mc.setProperty('uri.var.urlParamString', urlParamString);
				//url param processing end
				
				//request body param processing start
				payload = mc.getPayloadJSON();
				
				if (anyoneCanAddSelf != null && anyoneCanAddSelf != "") {
					payload.anyoneCanAddSelf = anyoneCanAddSelf;
				}
				
				if (attendeesOmitted != null && attendeesOmitted != "") {
					payload.attendeesOmitted = attendeesOmitted;
				}
				
				if (attendees != null && attendees != "") {
					payload.attendees = eval("("+attendees+")");
				}
				
				if (colorId != null && colorId != "") {
					payload.colorId = colorId;
				}
				
				if (description != null && description != "") {
					payload.description = description;
				}
				
				if (endTimeUnspecified != null && endTimeUnspecified != "") {
					payload.endTimeUnspecified = endTimeUnspecified;
				}
				
				if (etag != null && etag != "") {
					payload.etag = etag;
				}
				
				if (extendedProperties != null && extendedProperties != "") {
					payload.extendedProperties = eval("("+extendedProperties+")");
				}
				
				if (gadget != null && gadget != "") {
					payload.gadget = eval("("+gadget+")");
				}
				
				if (guestsCanInviteOthers != null && guestsCanInviteOthers != "") {
					payload.guestsCanInviteOthers = guestsCanInviteOthers;
				}
				
				if (guestsCanSeeOtherGuests != null && guestsCanSeeOtherGuests != "") {
					payload.guestsCanSeeOtherGuests = guestsCanSeeOtherGuests;
				}
				
				if (id != null && id != "") {
					payload.id = id;
				}
				
				if (kind != null && kind != "") {
					payload.kind = kind;
				}
				
				if (location != null && location != "") {
					payload.location = location;
				}
				
				if (originalStartTime != null && originalStartTime != "") {
					payload.originalStartTime = eval("("+originalStartTime+")");
				}
				
				if (privateCopy != null && privateCopy != "") {
					payload.privateCopy = privateCopy;
				}
				
				if (recurrence != null && recurrence != "") {
					payload.recurrence = eval("("+recurrence+")");
				}
				
				if (recurringEventId != null && recurringEventId != "") {
					payload.recurringEventId = recurringEventId;
				}
				
				if (reminders != null && reminders != "") {
					payload.reminders = eval("("+reminders+")");
				}
				
				if (sequence != null && sequence != "") {
					payload.sequence = sequence;
				}
				
				if (source != null && source != "") {
					payload.source = eval("("+source+")");
				}
				
				if (status != null && status != "") {
					payload.status = status;
				}
				
				if (summary != null && summary != "") {
					payload.summary = summary;
				}
				
				if (transparency != null && transparency != "") {
					payload.transparency = transparency;
				}
				
				if (visibility != null && visibility != "") {
					payload.visibility = visibility;
				}
				
				mc.setPayloadJSON(payload);
				//request body param processing end
				
			]]>
		</script>
		
		<call>
			<endpoint>
				<http method="post" uri-template="{uri.var.apiUrl}/calendar/v3/calendars/{uri.var.calendarId}/events/import{uri.var.urlParamString}" />
			</endpoint>
		</call>
		
		<!-- Remove response custom header information -->
		<header name="X-Frame-Options" scope="transport" action="remove" />
        <header name="X-XSS-Protection" scope="transport" action="remove" />
        <header name="Alternate-Protocol" scope="transport" action="remove" />
        <header name="X-Content-Type-Options" scope="transport" action="remove" />
		
	</sequence>
	
</template>