<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

   WSO2 Inc. licenses this file to you under the Apache License,
   Version 2.0 (the "License"); you may not use this file except
   in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License.
-->

<template name="updateTicket" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="ticketId" description="The unique ID of the ticket."/>
    <parameter name="subject" description="The Ticket subject."/>
    <parameter name="status" description="The Status of the ticket."/>
    <parameter name="priority" description="The Priority of the ticket."/>
    <parameter name="source" description="The The channel through which the ticket was created."/>
    <parameter name="deleted" description="The Deleted status of the Ticket."/>
    <parameter name="spam" description="Set as true if the ticket is marked as spam."/>
    <parameter name="requesterId"
               description="User-id of the requester. For existing contacts, requester_id can be passed instead of email."/>
    <parameter name="responderId" description="ID of the agent to whom the ticket is assigned."/>
    <parameter name="groupId" description="Id of Group to which the ticket is assigned."/>
    <parameter name="ticketType" description="Type property field as defined in ticket fields."/>
    <parameter name="toEmails"
               description="Email address to which the incoming ticket email was sent."/>
    <parameter name="emailConfigId"
               description="The Id of email config which is used for this ticket."/>
    <parameter name="isEscalated" description="Set to true if an escalation was sent."/>
    <parameter name="customField" description="Pre defined Custom fields as a JSON Object."/>
    <parameter name="trained" description="trained status as true or false."/>
    <parameter name="frEscalated" description="frEscalated status as true or false."/>
    <parameter name="delta" description="Delta as true or false."/>
    <parameter name="urgent" description="Urgent status as true or false."/>
    <parameter name="ownerId" description="The Owner Id."/>
    <parameter name="productId" description="The Product Id."/>

    <sequence>
        <property name="uri.var.ticketId" expression="$func:ticketId"/>
        <property name="uri.var.subject" expression="$func:subject"/>
        <property name="uri.var.status" expression="$func:status"/>
        <property name="uri.var.priority" expression="$func:priority"/>
        <property name="uri.var.source" expression="$func:source"/>
        <property name="uri.var.deleted" expression="$func:deleted"/>
        <property name="uri.var.spam" expression="$func:spam"/>
        <property name="uri.var.requesterId" expression="$func:requesterId"/>
        <property name="uri.var.responderId" expression="$func:responderId"/>
        <property name="uri.var.groupId" expression="$func:groupId"/>
        <property name="uri.var.ticketType" expression="$func:ticketType"/>
        <property name="uri.var.emailConfigId" expression="$func:emailConfigId"/>
        <property name="uri.var.toEmails" expression="$func:toEmails"/>
        <property name="uri.var.isEscalated" expression="$func:isEscalated"/>
        <property name="uri.var.customField" expression="$func:customField"/>
        <property name="uri.var.trained" expression="$func:trained"/>
        <property name="uri.var.frEscalated" expression="$func:frEscalated"/>
        <property name="uri.var.delta" expression="$func:delta"/>
        <property name="uri.var.urgent" expression="$func:urgent"/>
        <property name="uri.var.ownerId" expression="$func:ownerId"/>
        <property name="uri.var.productId" expression="$func:productId"/>

        <payloadFactory media-type="json">
            <format>
                {
                "helpdesk_ticket":{
                }
                }
            </format>
            <args></args>
        </payloadFactory>

        <!-- Constructing payload with optional parameters -->
        <script language="js">
            <![CDATA[
         payload = mc.getPayloadJSON();
         
         var subject = mc.getProperty("uri.var.subject");
         var requesterId = mc.getProperty("uri.var.requesterId");
         var emailConfigId = mc.getProperty("uri.var.emailConfigId");
         var source = mc.getProperty("uri.var.source");
         var priority = mc.getProperty("uri.var.priority");
         var deleted = mc.getProperty("uri.var.deleted");
         var spam = mc.getProperty("uri.var.spam");
         var responderId = mc.getProperty("uri.var.responderId");
         var groupId = mc.getProperty("uri.var.groupId");
         var customField = mc.getProperty("uri.var.customField");
         var trained = mc.getProperty("uri.var.trained");
         var frEscalated = mc.getProperty("uri.var.frEscalated");
         var delta = mc.getProperty("uri.var.delta");
         var urgent = mc.getProperty("uri.var.urgent");
         var ownerId = mc.getProperty("uri.var.ownerId");
         var isEscalated = mc.getProperty("uri.var.isEscalated");
         var status = mc.getProperty("uri.var.status");
         var ticketType = mc.getProperty("uri.var.ticketType");
         var toEmails = mc.getProperty("uri.var.toEmails");
         var productId = mc.getProperty("uri.var.productId");
         
         if (subject != null && subject != ""){
            payload.helpdesk_ticket.subject = subject.trim();
         }
         
         if (requesterId != null && requesterId != ""){
            payload.helpdesk_ticket.requester_id = requesterId.trim();
         }
         
         if (emailConfigId != null && emailConfigId != ""){
            payload.helpdesk_ticket.email_config_id = emailConfigId.trim();
         }
         
         if (source != null && source != ""){
            payload.helpdesk_ticket.source = source.trim();
         }
         
         if (priority != null && priority != ""){
            payload.helpdesk_ticket.priority = priority.trim();
         }
         
         if (deleted != null && deleted != ""){
            payload.helpdesk_ticket.deleted = deleted.trim();
         }
         
         if (spam != null && spam != ""){
            payload.helpdesk_ticket.spam = spam.trim();
         }
         
         if (responderId != null && responderId != ""){
            payload.helpdesk_ticket.responder_id = responderId.trim();
         }
         
         if (groupId != null && groupId != ""){
            payload.helpdesk_ticket.group_id = groupId.trim();
         }
         
         if (customField != null && customField != ""){
            payload.helpdesk_ticket.custom_field =  eval("("+customField+")");;
         }
         
         if (trained != null && trained != ""){
            payload.helpdesk_ticket.trained = trained.trim();
         }
         
         if (frEscalated != null && frEscalated != ""){
            payload.helpdesk_ticket.fr_escalated = frEscalated.trim();
         }
         
         if (delta != null && delta != ""){
            payload.helpdesk_ticket.delta = delta.trim();
         }
         
         if (urgent != null && urgent != ""){
            payload.helpdesk_ticket.urgent = urgent.trim();
         }
         
         if (ownerId != null && ownerId != ""){
            payload.helpdesk_ticket.owner_id = ownerId.trim();
         }
         
         if (isEscalated != null && isEscalated != ""){
            payload.helpdesk_ticket.isescalated = isEscalated.trim();
         }
         
         if (status != null && status != ""){
            payload.helpdesk_ticket.status = status.trim();
         }
         
         if (ticketType != null && ticketType != ""){
            payload.helpdesk_ticket.ticket_type = ticketType.trim();
         }
         
         if (toEmails != null && toEmails != ""){
            payload.helpdesk_ticket.to_emails = toEmails.trim();
         }
         
         if (productId != null && productId != ""){
            payload.helpdesk_ticket.product_id = productId.trim();
         }
         
         mc.setPayloadJSON(payload);
         ]]>
        </script>

        <call>
            <endpoint>
                <http method="put"
                      uri-template="{uri.var.apiUrl}/helpdesk/tickets/{uri.var.ticketId}.{uri.var.format}"/>
            </endpoint>
        </call>

        <!-- Remove response custom header information -->
        <header name="X-Runtime" scope="transport" action="remove"/>
        <header name="X-Powered-By" scope="transport" action="remove"/>

    </sequence>
</template>