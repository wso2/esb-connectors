<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~  Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->
<template name="listMoments" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="userId"
               description="The ID of the user to get moments for. The special value 'me' can be used to indicate the authenticated user."/>
    <parameter name="maxResults"
               description="The maximum number of moments to include in the response, which is used for paging."/>
    <parameter name="pageToken"
               description="The continuation token, which is used to page through large result sets"/>
    <parameter name="collection" description="The collection of moments to list."/>
    <parameter name="fields"
               description="Selector specifying which fields to include in a partial response"/>
    <parameter name="targetUrl"
               description="Only moments containing this targetUrl will be returned."/>
    <parameter name="type"
               description="Only moments of this type will be returned."/>
    <sequence>
        <property name="uri.var.userId" expression="$func:userId"/>
        <property name="uri.var.maxResults" expression="$func:maxResults"/>
        <property name="uri.var.pageToken" expression="$func:pageToken"/>
        <property name="uri.var.collection" expression="$func:collection"/>
        <property name="uri.var.fields" expression="$func:fields"/>
        <property name="uri.var.targetUrl" expression="$func:targetUrl"/>
        <property name="uri.var.type" expression="$func:type"/>
        <script language="js"><![CDATA[
            var pageToken = mc.getProperty('uri.var.pageToken');
            var fields = mc.getProperty('uri.var.fields');
            var encodedPageToken = encodeURIComponent(pageToken);
            mc.setProperty('uri.var.encodedPageToken', encodedPageToken);
            var encodedFields = encodeURIComponent(fields);
            mc.setProperty('uri.var.encodedFields', encodedFields);
        ]]>
        </script>
        <filter xpath="(not(get-property('uri.var.encodedFields') = '' or (not(string(get-property('uri.var.encodedFields'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'fields=',get-property('uri.var.encodedFields'),'&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not(get-property('uri.var.maxResults') = '' or (not(string(get-property('uri.var.maxResults'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'maxResults=',get-property('uri.var.maxResults'),'&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not(get-property('uri.var.encodedPageToken') = '' or (not(string(get-property('uri.var.encodedPageToken'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'pageToken=',get-property('uri.var.encodedPageToken'),'&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not(get-property('uri.var.sortOrder') = '' or (not(string(get-property('uri.var.sortOrder'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'sortOrder=',get-property('uri.var.sortOrder'),'&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not(get-property('uri.var.tagUrl') = '' or (not(string(get-property('uri.var.fields'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'tagUrl=',get-property('uri.var.tagUrl'),'&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not(get-property('uri.var.type') = '' or (not(string(get-property('uri.var.type'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'type=',get-property('uri.var.type'),'&amp;')"/>
            </then>
        </filter>
        <call>
            <endpoint>
                <http method="GET"
                      uri-template="legacy-encoding:{uri.var.apiUrl}/people/{uri.var.userId}/moments/{uri.var.collection}?{uri.var.apiParameters}"/>
            </endpoint>
        </call>
        <!-- Remove response custom header information -->
        <header name="Cache-Control" scope="transport" action="remove"/>
        <header name="Expires" scope="transport" action="remove"/>
        <header name="X-Content-Type-Options" scope="transport" action="remove"/>
    </sequence>
</template>
