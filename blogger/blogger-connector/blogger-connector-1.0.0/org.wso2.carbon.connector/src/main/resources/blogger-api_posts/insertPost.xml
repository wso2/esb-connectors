<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~  Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->
<template xmlns="http://ws.apache.org/ns/synapse" name="insertPost">
    <parameter name="blogID"/>
    <parameter name="isDraft"/>
    <parameter name="fields"/>
    <parameter name="title"/>
    <parameter name="content"/>
    <parameter name="authorName"/>
    <parameter name="authorURL"/>
    <parameter name="authorImgURL"/>
    <parameter name="locationName"/>
    <parameter name="locationLat"/>
    <parameter name="locationLng"/>
    <parameter name="locationSpan"/>
    <parameter name="titleLink"/>
    <parameter name="labels"></parameter>
    <parameter name="images"></parameter>
    <parameter name="published"/>
    <parameter name="updated"/>
    <parameter name="status"/>
    <sequence>
        <property expression="$func:blogID" name="uri.var.blog_id"
                  scope="default" type="STRING"/>
        <property expression="$func:isDraft" name="uri.var.is_draft"
                  scope="default" type="STRING"/>
        <property expression="$func:fields" name="uri.var.fields"
                  scope="default" type="STRING"/>
        <property expression="$func:title" name="uri.var.title"
                  scope="default" type="STRING"/>
        <property expression="$func:content" name="uri.var.content"
                  scope="default" type="STRING"/>
        <property expression="$func:authorName" name="uri.var.author_name"
                  scope="default" type="STRING"/>
        <property expression="$func:authorURL" name="uri.var.author_url"
                  scope="default" type="STRING"/>
        <property expression="$func:authorImgURL" name="uri.var.author_img_url"
                  scope="default" type="STRING"/>
        <property expression="$func:locationName" name="uri.var.location_name"
                  scope="default" type="STRING"/>
        <property expression="$func:locationLat" name="uri.var.location_lat"
                  scope="default" type="STRING"/>
        <property expression="$func:locationLng" name="uri.var.location_lng"
                  scope="default" type="STRING"/>
        <property expression="$func:locationSpan" name="uri.var.location_span"
                  scope="default" type="STRING"/>
        <property expression="$func:titleLink" name="uri.var.title_link"
                  scope="default" type="STRING"/>
        <property expression="$func:labels" name="uri.var.labels"
                  scope="default" type="STRING"/>
        <property expression="$func:images" name="uri.var.images"
                  scope="default" type="STRING"/>
        <property expression="$func:status" name="uri.var.status"
                  scope="default" type="STRING"/>
        <property expression="$func:published" name="uri.var.published"
                  scope="default" type="STRING"/>
        <property expression="$func:updated" name="uri.var.updated"
                  scope="default" type="STRING"/>
        <filter
                xpath="get-property('uri.var.is_draft') = 'true' or get-property('uri.var.is_draft') = 'false'">
            <then>
                <property name="uri.var.fields"
                          expression="concat(get-property('uri.var.fields'),'&amp;isDraft&#61;',get-property('uri.var.is_draft')) "/>
            </then>
        </filter>
        <filter
                xpath="not(get-property('uri.var.fields') = '' or  (not(string(get-property('uri.var.fields')))))">
            <then>
                <property name="uri.var.fields"
                          expression="concat('&amp;fields&#61;',get-property('uri.var.fields')) "/>
            </then>
        </filter>
        <payloadFactory media-type="json">
            <format>
                { }
            </format>
            <args/>
        </payloadFactory>
        <script language="js">
            <![CDATA[
                 var title       =mc.getProperty('uri.var.title');
                 var content     =mc.getProperty('uri.var.content');
                 var authorName  =mc.getProperty('uri.var.author_name');
                 var authorURL   =mc.getProperty('uri.var.author_url');
                 var authorImgURL=mc.getProperty('uri.var.author_img_url');
                 var locationName=mc.getProperty('uri.var.location_name');
                 var locationLat =mc.getProperty('uri.var.location_lat');
                 var locationLng =mc.getProperty('uri.var.location_lng');
                 var locationSpan=mc.getProperty('uri.var.location_span');
                 var titleLink   =mc.getProperty('uri.var.title_link');                 
                 var labels      =mc.getProperty('uri.var.labels');                 
                 var images      =mc.getProperty('uri.var.images');  
                 var status      =mc.getProperty('uri.var.status');  
                 var published   =mc.getProperty('uri.var.published');  
                 var updated     =mc.getProperty('uri.var.updated'); 
                 
                 payload = mc.getPayloadJSON();
                 
                if(title != null && title != "")            
                   payload.title = title;
                else
                   payload.title = "Untitled Post";
                if(content != null && content != "")            
                   payload.content = content;
                var auth = new Object();
                
                if(authorName != null && authorName != ""){
                   auth.displayName=authorName;
                   payload.author = auth;
                }
                
                if(authorURL != null && authorURL != "") {
                   auth.url=authorURL;
                   payload.author = auth;
                }
               
                if(authorImgURL != null && authorImgURL != "")  {
                 var img = new Object();
                   img.url =authorImgURL;
                   auth.image= img;
                   payload.author = auth;
                }
                   
                var loc = new Object();
                
                if(locationName != null && locationName != "")  {
                   loc.name = locationName;
                   payload.location = loc;
                }
                if(locationLat != null && locationLat != "")  {
                   loc.lat = locationLat;
                   payload.location = loc;
                }
                if(locationLng != null && locationLng != "")   {
                   loc.lng = locationLng;
                   payload.location = loc;
                }
                if(locationSpan != null && locationSpan != "")   {
                   loc.span = locationSpan;
                   payload.location = loc;
                }
                if(titleLink != null && titleLink != "")  
                   payload.titleLink =titleLink;  
                   
                if(labels != null && labels != "")  
                   payload.labels =labels.split(",");  
               
                if(images != null && images != "")  
                   payload.images =images.split(",");  
                
                if(status != null && status != "")  
                   payload.status =status;   
                   
                if(published != null && published != "")  
                   payload.published =published;     
                   
                if(updated != null && updated != "")  
                   payload.updated =updated;     
                   
                mc.setPayloadJSON(payload);
                
      ]]></script>
        <property name="messageType" scope="axis2" value="application/json"/>
        <call>
            <endpoint>
                <http method="post"
                      uri-template="https://www.googleapis.com/blogger/v{uri.var.api_version}/blogs/{uri.var.blog_id}/posts?access_token&#61;{uri.var.access_token}{+uri.var.fields}"></http>
            </endpoint>
        </call>
        <header name="etag" scope="transport" action="remove"/>
    </sequence>
</template>
