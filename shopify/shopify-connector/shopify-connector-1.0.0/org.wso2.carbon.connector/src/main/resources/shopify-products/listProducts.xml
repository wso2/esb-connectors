<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
   WSO2 Inc. licenses this file to you under the Apache License,
   Version 2.0 (the "License"); you may not use this file except
   in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<template name="listProducts" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="limit"
               description="Amount of results. Default value 50 and maximum value 250."/>
    <parameter name="page" description="Page to show. Default 1."/>
    <parameter name="sinceId"
               description="Product identifier, response will only contain the products having identifiers higher than this."/>
    <parameter name="vendor" description="Filter by product vendor."/>
    <parameter name="handle" description="Filter by product handle."/>
    <parameter name="productType" description="Filter by product type."/>
    <parameter name="collectionId" description="Filter by collection id."/>
    <parameter name="createdAfter" description="Show products created after date."/>
    <parameter name="createdBefore" description="Show products created before date."/>
    <parameter name="updatedAfter" description="Show products last updated after date."/>
    <parameter name="updatedBefore" description="Show products last updated before date."/>
    <parameter name="publishedAfter" description="Show products published after date."/>
    <parameter name="publishedBefore" description="Show products published before date."/>
    <parameter name="publishedStatus"
               description="To show published or unpublished or all products."/>
    <parameter name="fields"
               description="comma separated list of fields to include in the response."/>

    <sequence>
        <property name="uri.var.limit" expression="$func:limit"/>
        <property name="uri.var.page" expression="$func:page"/>
        <property name="uri.var.sinceId" expression="$func:sinceId"/>
        <property name="uri.var.vendor" expression="$func:vendor"/>
        <property name="uri.var.handle" expression="$func:handle"/>
        <property name="uri.var.productType" expression="$func:productType"/>
        <property name="uri.var.collectionId" expression="$func:collectionId"/>
        <property name="uri.var.createdAfter" expression="$func:createdAfter"/>
        <property name="uri.var.createdBefore" expression="$func:createdBefore"/>
        <property name="uri.var.updatedAfter" expression="$func:updatedAfter"/>
        <property name="uri.var.updatedBefore" expression="$func:updatedBefore"/>
        <property name="uri.var.publishedAfter" expression="$func:publishedAfter"/>
        <property name="uri.var.publishedBefore" expression="$func:publishedBefore"/>
        <property name="uri.var.publishedStatus" expression="$func:publishedStatus"/>
        <property name="uri.var.fields" expression="$func:fields"/>

        <script language="js">
            <![CDATA[
				
				var limit = mc.getProperty('uri.var.limit');
				var page = mc.getProperty('uri.var.page');
				var sinceId = mc.getProperty('uri.var.sinceId');
				var vendor = mc.getProperty('uri.var.vendor');
				var handle = mc.getProperty('uri.var.handle');
				var productType = mc.getProperty('uri.var.productType');
				var collectionId = mc.getProperty('uri.var.collectionId');
				var createdAfter = mc.getProperty('uri.var.createdAfter');
				var createdBefore = mc.getProperty('uri.var.createdBefore');
				var updatedAfter = mc.getProperty('uri.var.updatedAfter');
				var updatedBefore = mc.getProperty('uri.var.updatedBefore');
				var publishedAfter = mc.getProperty('uri.var.publishedAfter');
				var publishedBefore = mc.getProperty('uri.var.publishedBefore');
				var publishedStatus = mc.getProperty('uri.var.publishedStatus');
				var fields = mc.getProperty('uri.var.fields');
				var uriParams = '';
				
				if(limit != null && limit != "")
				{
					uriParams = uriParams + 'limit=' + limit + '&';
				}
				
				if(page != null && page != "")
				{
					uriParams = uriParams + 'page=' + page + '&';
				}
				
				if(sinceId != null && sinceId != "")
				{
					uriParams = uriParams + 'since_id=' + sinceId + '&';
				}
				
				if(vendor != null && vendor != "")
				{
					uriParams = uriParams + 'vendor=' + vendor + '&';
				}
				
				if(handle != null && handle != "")
				{
					uriParams = uriParams + 'handle=' + handle + '&';
				}
				
				if(productType != null && productType != "")
				{
					uriParams = uriParams + 'product_type=' + productType + '&';
				}
				
				if(collectionId != null && collectionId != "")
				{
					uriParams = uriParams + 'collection_id=' + collectionId + '&';
				}
				
				if(createdAfter != null && createdAfter != "")
				{
					uriParams = uriParams + 'created_at_min=' + createdAfter + '&';
				}
				
				if(createdBefore != null && createdBefore != "")
				{
					uriParams = uriParams + 'created_at_max=' + createdBefore + '&';
				}
				
				if(updatedAfter != null && updatedAfter != "")
				{
					uriParams = uriParams + 'updated_at_min=' + updatedAfter + '&';
				}
				
				if(updatedBefore != null && updatedBefore != "")
				{
					uriParams = uriParams + 'updated_at_max=' + updatedBefore + '&';
				}
				
				if(publishedAfter != null && publishedAfter != "")
				{
					uriParams = uriParams + 'published_at_min=' + publishedAfter + '&';
				}
				
				if(publishedBefore != null && publishedBefore != "")
				{
					uriParams = uriParams + 'published_at_max=' + publishedBefore + '&';
				}
				
				if(publishedStatus != null && publishedStatus != "")
				{
					uriParams = uriParams + 'published_status=' + publishedStatus + '&';
				}
				
				if(fields != null && fields != "")
				{
					uriParams = uriParams + 'fields=' + fields + '&';
				}
	
				if (uriParams != '') {
					mc.setProperty("uri.var.uriParams", '?' + uriParams.substring(0, uriParams.length-1));
				}
				
			]]>
        </script>

        <call>
            <endpoint>
                <http method="get"
                      uri-template="{uri.var.apiUrl}/admin/products.{uri.var.format}{+uri.var.uriParams}"/>
            </endpoint>
        </call>

        <!-- Removing custom headers -->
        <header name="X-XSS-Protection" action="remove" scope="transport"/>
        <header name="X-UA-Compatible" action="remove" scope="transport"/>
        <header name="X-Request-Id" action="remove" scope="transport"/>
        <header name="X-Stats-ApiClientId" action="remove" scope="transport"/>
        <header name="X-Content-Type-Options" action="remove" scope="transport"/>
        <header name="X-Stats-ApiPermissionId" action="remove" scope="transport"/>
        <header name="Status" action="remove" scope="transport"/>
        <header name="X-Frame-Options" action="remove" scope="transport"/>
        <header name="X-Stats-UserId" action="remove" scope="transport"/>
        <header name="X-ShopId" action="remove" scope="transport"/>
        <header name="Vary" action="remove" scope="transport"/>
        <header name="HTTP_X_SHOPIFY_SHOP_API_CALL_LIMIT" action="remove" scope="transport"/>
        <header name="X-Served-With" action="remove" scope="transport"/>
        <header name="X-ShardId" action="remove" scope="transport"/>
        <header name="X-Shopify-Shop-Api-Call-Limit" action="remove" scope="transport"/>
        <header name="WWW-Authenticate" action="remove" scope="transport"/>
        <header name="X-Stats-Validation-Errors" action="remove" scope="transport"/>

    </sequence>
</template>