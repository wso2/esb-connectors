<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (c) 2005-2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

   WSO2 Inc. licenses this file to you under the Apache License,
   Version 2.0 (the "License"); you may not use this file except
   in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied. See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<!-- Method Documentation URL: https://developers.supportbee.com/api#fetching_tickets -->
<template name="listTickets" xmlns="http://ws.apache.org/ns/synapse">
   <parameter name="perPage" description="Specifies the number of entries to retrieve. Must be less than 100. Defaults to 15." />
   <parameter name="page" description="Specifies the page of entries to retrieve. Defaults to 1." />
   <parameter name="archived"
      description="If true, retrieves only archived tickets. If false, it does not return any archived tickets. If any, includes archived tickets in the result. Defaults to false." />
   <parameter name="spam" description="If true, retrieved tickets contain tickets marked as spam. Defaults to false." />
   <parameter name="trash" description="If true, retrieved tickets contain tickets that are trashed. Defaults to false." />
   <parameter name="replies"
      description="If true, retrieved tickets contain only tickets with replies. If false, retrieved tickets contain only tickets without replies." />
   <parameter name="maxReplies"
      description="Specifies the number of replies that a ticket must have. This cannot be used with replies = false." />
   <parameter name="assignedUser"
      description="If me, retrieves only the tickets assigned to the current user. If agent\id, retrieves only the tickets assigned to the Agent with id _agent\id_ If none, retrieves only the unassigned tickets." />
   <parameter name="assignedGroup"
      description="If mine, retrieves all the tickets assigned to all the groups of the current user If group\id, retrieves only the tickets assigned to the group with id _group\id_." />
   <parameter name="starred"
      description="If true, retrieves only the starred tickets of the current user If false, retrieves only the non starred tickets assigned to the current user." />
   <parameter name="label" description="Set to label\name, retrieves only the tickets with the label _label\name_." />
   <parameter name="since"
      description="Can be used to retrieve tickets which are created after the time specified in this parameter." />
   <parameter name="until"
      description="Can be used to retrieve tickets which are created before the time specified in this parameter." />
   <parameter name="requesterEmails"
      description="Can be used to filter tickets by requester email addresses. Accepts a string of comma separated email addresses." />
   <sequence>
      <property name="uri.var.perPage" expression="$func:perPage" />
      <property name="uri.var.page" expression="$func:page" />
      <property name="uri.var.archived" expression="$func:archived" />
      <property name="uri.var.spam" expression="$func:spam" />
      <property name="uri.var.trash" expression="$func:trash" />
      <property name="uri.var.replies" expression="$func:replies" />
      <property name="uri.var.maxReplies" expression="$func:maxReplies" />
      <property name="uri.var.assignedUser" expression="$func:assignedUser" />
      <property name="uri.var.assignedGroup" expression="$func:assignedGroup" />
      <property name="uri.var.starred" expression="$func:starred" />
      <property name="uri.var.label" expression="$func:label" />
      <property name="uri.var.since" expression="$func:since" />
      <property name="uri.var.until" expression="$func:until" />
      <property name="uri.var.requesterEmails" expression="$func:requesterEmails" />
      <script language="js">
         <![CDATA[
            var archived = mc.getProperty('uri.var.archived');
            var assignedGroup = mc.getProperty('uri.var.assignedGroup');
            var assignedUser = mc.getProperty('uri.var.assignedUser');
            var label = mc.getProperty('uri.var.label');
            var maxReplies = mc.getProperty('uri.var.maxReplies');
            var page = mc.getProperty('uri.var.page');
            var perPage = mc.getProperty('uri.var.perPage');
            var replies = mc.getProperty('uri.var.replies');
            var requesterEmails = mc.getProperty('uri.var.requesterEmails');
            var since = mc.getProperty('uri.var.since');
            var spam = mc.getProperty('uri.var.spam');
            var starred = mc.getProperty('uri.var.starred');
            var trash = mc.getProperty('uri.var.trash');
            var until = mc.getProperty('uri.var.until');
            var urlQuery = '';
            if (perPage != null && perPage != "") {
               urlQuery += '&per_page=' + perPage;
            }
            if (page != null && page != "") {
               urlQuery += '&page=' + page;
            }
            if (archived != null && archived != "") {
               urlQuery += '&archived=' + archived;
            }
            if (spam != null && spam != "") {
               urlQuery += '&spam=' + spam;
            }
            if (trash != null && trash != "") {
               urlQuery += '&trash=' + trash;
            }
            if (replies != null && replies != "") {
               urlQuery += '&replies=' + replies;
            }
            if (maxReplies != null && maxReplies != "") {
               urlQuery += '&max_replies=' + maxReplies;
            }
            if (assignedUser != null && assignedUser != "") {
               urlQuery += '&assigned_user=' + assignedUser;
            }
            if (assignedGroup != null && assignedGroup != "") {
               urlQuery += '&assigned_group=' + assignedGroup;
            }
            if (starred != null && starred != "") {
               urlQuery += '&starred=' + starred;
            }
            if (label != null && label != "") {
               urlQuery += '&label=' + label;
            }
            if (since != null && since != "") {
               urlQuery += '&since=' + since;
            }
            if (until != null && until != "") {
               urlQuery += '&until=' + until;
            }
            if (requesterEmails != null && requesterEmails != "") {
               urlQuery += '&requester_emails=' + requesterEmails;
            }
            if (urlQuery != "") {
               mc.setProperty('uri.var.urlQuery', encodeURI(urlQuery));
            }
         ]]>
      </script>
      <call>
         <endpoint>
            <http method="get" uri-template="{uri.var.apiUrl}/tickets{uri.var.authToken}{uri.var.urlQuery}" />
         </endpoint>
      </call>
      <!-- Remove custom Headers from the API Response -->
      <header name="ETag" action="remove" scope="transport" />
      <header name="Strict-Transport-Security" action="remove" scope="transport" />
      <header name="X-Rack-Cache" action="remove" scope="transport" />
      <header name="X-Request-Id" action="remove" scope="transport" />
      <header name="X-Runtime" action="remove" scope="transport" />
      <header name="X-UA-Compatible" action="remove" scope="transport" />
      <header name="Status" action="remove" scope="transport" />
   </sequence>
</template>