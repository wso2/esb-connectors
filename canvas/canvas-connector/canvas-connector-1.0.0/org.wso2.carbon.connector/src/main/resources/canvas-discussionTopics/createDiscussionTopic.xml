<!--
    Copyright (c)2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

    WSO2 Inc. licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file except
    in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
-->
<template name="createDiscussionTopic" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="courseId" description="The unique identifier of the course that discussion created."/>
    <parameter name="title" description="The title of the discussion."/>
    <parameter name="message" description="The discussion message."/>
    <parameter name="discussionType" description="The type of discussion."/>
    <parameter name="published" description="Whether this topic is published."/>
    <parameter name="delayedPostAt" description="The discussion will not publish untill given date time."/>
    <parameter name="lockAt" description="The topic will be scheduled to lock at the provided date time."/>
    <parameter name="podcastEnabled" description="Whether topic will have an associated podcast feed."/>
    <parameter name="podcastHasStudentPosts" description="Whether podcast will include posts from students."/>
    <parameter name="requireInitialPost"
               description="Whether the user respond to other replies until that user has made an initial reply."/>
    <parameter name="isAnnouncement" description="Whether this topic is an announcement."/>
    <parameter name="positionAfter" description="List position of the discussion."/>
    <parameter name="groupCategoryId" description="The group id to add this discussion."/>
    <parameter name="assignmentName" description="The name of the assignment related to discussion."/>
    <parameter name="assignmentPosition"
               description="The position of this assignment in the group when displaying assignment lists."/>
    <parameter name="assignmentSubmissionTypes" description="List of supported submission types for the assignment."/>
    <parameter name="assignmentAllowedExtensions"
               description="Allowed extensions if submission types includes online upload."/>
    <parameter name="assignmentTurnitinEnabled"
               description="Applies when the Turnitin plugin is enabled for a course."/>
    <parameter name="assignmentTurnitinSettings" description="Settings to send along to turnitin."/>
    <parameter name="assignmentIntegrationData" description="Data related to third party integrations."/>
    <parameter name="assignmentIntegrationId" description="The Unique ID from third party integrations."/>
    <parameter name="assignmentPeerReviews"
               description="whether or not peer reviews will be turned on for the assignment."/>
    <parameter name="assignmentAutomaticPeerReviews"
               description="Whether peer reviews will be assigned automatically by Canvas."/>
    <parameter name="assignmentNotifyOfUpdate" description="Whether canvas send a notification to students."/>
    <parameter name="assignmentGroupCategoryId"
               description="The assignment will become a group assignment assigned to the group."/>
    <parameter name="assignmentGradeGroupStudentsIndividually"
               description="If Group assignment, Teachers have the options to grade students individually."/>
    <parameter name="assignmentExternalToolTagAttributes"
               description="Hash of attributes if submission types is external tool."/>
    <parameter name="assignmentPointsPossible" description="The maximum points possible on the assignment."/>
    <parameter name="assignmentGradingType" description="The strategy used for grading the assignment."/>
    <parameter name="assignmentDueAt" description="The due date and time of the assignment."/>
    <parameter name="assignmentLockAt" description="The date and time of the assignment is locked."/>
    <parameter name="assignmentUnlockAt" description="The date and time of the assignment is unlocked."/>
    <parameter name="assignmentDescription" description="The assignment's description."/>
    <parameter name="assignmentAssignmentGroupId" description="The assignment group id to put the assignment in."/>
    <parameter name="assignmentMuted" description="Whether this assignment is muted."/>
    <parameter name="assignmentAssignmentOverrides" description="List of overrides for the assignment."/>
    <parameter name="assignmentOnlyVisibleToOverrides"
               description="Whether this assignment is only visible to overrides."/>
    <parameter name="assignmentPublished" description="Whether this assignment is published."/>
    <parameter name="assignmentGradingStandardId" description="The grading standard id to set for the course."/>
    <sequence>
        <property name="uri.var.courseId" expression="$func:courseId"/>
        <property name="uri.var.title" expression="$func:title"/>
        <property name="uri.var.message" expression="$func:message"/>
        <property name="uri.var.discussionType" expression="$func:discussionType"/>
        <property name="uri.var.published" expression="$func:published"/>
        <property name="uri.var.delayedPostAt" expression="$func:delayedPostAt"/>
        <property name="uri.var.lockAt" expression="$func:lockAt"/>
        <property name="uri.var.podcastEnabled" expression="$func:podcastEnabled"/>
        <property name="uri.var.podcastHasStudentPosts" expression="$func:podcastHasStudentPosts"/>
        <property name="uri.var.requireInitialPost" expression="$func:requireInitialPost"/>
        <property name="uri.var.isAnnouncement" expression="$func:isAnnouncement"/>
        <property name="uri.var.positionAfter" expression="$func:positionAfter"/>
        <property name="uri.var.groupCategoryId" expression="$func:groupCategoryId"/>
        <property name="uri.var.assignmentName" expression="$func:assignmentName"/>
        <property name="uri.var.assignmentPosition" expression="$func:assignmentPosition"/>
        <property name="uri.var.assignmentSubmissionTypes" expression="$func:assignmentSubmissionTypes"/>
        <property name="uri.var.assignmentAllowedExtensions" expression="$func:assignmentAllowedExtensions"/>
        <property name="uri.var.assignmentTurnitinEnabled" expression="$func:assignmentTurnitinEnabled"/>
        <property name="uri.var.assignmentTurnitinSettings" expression="$func:assignmentTurnitinSettings"/>
        <property name="uri.var.assignmentIntegrationData" expression="$func:assignmentIntegrationData"/>
        <property name="uri.var.assignmentIntegrationId" expression="$func:assignmentIntegrationId"/>
        <property name="uri.var.assignmentPeerReviews" expression="$func:assignmentPeerReviews"/>
        <property name="uri.var.assignmentAutomaticPeerReviews" expression="$func:assignmentAutomaticPeerReviews"/>
        <property name="uri.var.assignmentNotifyOfUpdate" expression="$func:assignmentNotifyOfUpdate"/>
        <property name="uri.var.assignmentGroupCategoryId" expression="$func:assignmentGroupCategoryId"/>
        <property name="uri.var.assignmentGradeGroupStudentsIndividually"
                  expression="$func:assignmentGradeGroupStudentsIndividually"/>
        <property name="uri.var.assignmentExternalToolTagAttributes"
                  expression="$func:assignmentExternalToolTagAttributes"/>
        <property name="uri.var.assignmentPointsPossible" expression="$func:assignmentPointsPossible"/>
        <property name="uri.var.assignmentGradingType" expression="$func:assignmentGradingType"/>
        <property name="uri.var.assignmentDueAt" expression="$func:assignmentDueAt"/>
        <property name="uri.var.assignmentLockAt" expression="$func:assignmentLockAt"/>
        <property name="uri.var.assignmentUnlockAt" expression="$func:assignmentUnlockAt"/>
        <property name="uri.var.assignmentDescription" expression="$func:assignmentDescription"/>
        <property name="uri.var.assignmentAssignmentGroupId" expression="$func:assignmentAssignmentGroupId"/>
        <property name="uri.var.assignmentMuted" expression="$func:assignmentMuted"/>
        <property name="uri.var.assignmentAssignmentOverrides" expression="$func:assignmentAssignmentOverrides"/>
        <property name="uri.var.assignmentOnlyVisibleToOverrides" expression="$func:assignmentOnlyVisibleToOverrides"/>
        <property name="uri.var.assignmentPublished" expression="$func:assignmentPublished"/>
        <property name="uri.var.assignmentGradingStandardId" expression="$func:assignmentGradingStandardId"/>
        <!-- Building payload for params -->
        <script language="js">
            <![CDATA[
	  				var title = mc.getProperty("uri.var.title");
	  				var message = mc.getProperty("uri.var.message");
	  				var discussionType = mc.getProperty("uri.var.discussionType");
	  				var published = mc.getProperty("uri.var.published");
	  				var delayedPostAt = mc.getProperty("uri.var.delayedPostAt");
	  				var lockAt = mc.getProperty("uri.var.lockAt");
	  				var podcastEnabled = mc.getProperty("uri.var.podcastEnabled");
	  				var podcastHasStudentPosts = mc.getProperty("uri.var.podcastHasStudentPosts");
	  				var requireInitialPost = mc.getProperty("uri.var.requireInitialPost");
	  				var isAnnouncement = mc.getProperty("uri.var.isAnnouncement");
	  				var positionAfter = mc.getProperty("uri.var.positionAfter");
					var groupCategoryId = mc.getProperty("uri.var.groupCategoryId");
					var assignmentName = mc.getProperty("uri.var.assignmentName");
	  				var assignmentPosition = mc.getProperty("uri.var.assignmentPosition");
	  				var assignmentSubmissionTypes = mc.getProperty("uri.var.assignmentSubmissionTypes");
	  				var assignmentAllowedExtensions = mc.getProperty("uri.var.assignmentAllowedExtensions");
	  				var assignmentTurnitinEnabled = mc.getProperty("uri.var.assignmentTurnitinEnabled");
	  				var assignmentTurnitinSettings = mc.getProperty("uri.var.assignmentTurnitinSettings");
	  				var assignmentIntegrationData = mc.getProperty("uri.var.assignmentIntegrationData");
	  				var assignmentIntegrationId = mc.getProperty("uri.var.assignmentIntegrationId");
	  				var assignmentPeerReviews = mc.getProperty("uri.var.assignmentPeerReviews");
	  				var assignmentAutomaticPeerReviews = mc.getProperty("uri.var.assignmentAutomaticPeerReviews");
	  				var assignmentNotifyOfUpdate = mc.getProperty("uri.var.assignmentNotifyOfUpdate");
	  				var assignmentGroupCategoryId = mc.getProperty("uri.var.assignmentGroupCategoryId");
					var assignmentGradeGroupStudentsIndividually = mc.getProperty("uri.var.assignmentGradeGroupStudentsIndividually");
					var assignmentExternalToolTagAttributes = mc.getProperty("uri.var.assignmentExternalToolTagAttributes");
	  				var assignmentPointsPossible = mc.getProperty("uri.var.assignmentPointsPossible");
	  				var assignmentGradingType = mc.getProperty("uri.var.assignmentGradingType");
	  				var assignmentDueAt = mc.getProperty("uri.var.assignmentDueAt");
	  				var assignmentLockAt = mc.getProperty("uri.var.assignmentLockAt");
	  				var assignmentUnlockAt = mc.getProperty("uri.var.assignmentUnlockAt");
	  				var assignmentDescription = mc.getProperty("uri.var.assignmentDescription");
	  				var assignmentAssignmentGroupId = mc.getProperty("uri.var.assignmentAssignmentGroupId");
	  				var assignmentMuted = mc.getProperty("uri.var.assignmentMuted");
	  				var assignmentAssignmentOverrides = mc.getProperty("uri.var.assignmentAssignmentOverrides");
	  				var assignmentOnlyVisibleToOverrides = mc.getProperty("uri.var.assignmentOnlyVisibleToOverrides");
	  				var assignmentPublished = mc.getProperty("uri.var.assignmentPublished");
					var assignmentGradingStandardId = mc.getProperty("uri.var.assignmentGradingStandardId");

	  				var	payload = {};

	  				if (title != null && title != ""){
	  					payload ["title"] = title;
	  				}
        			if (message != null && message != ""){
	  					payload ["message"] = message;
	  				}
	  				if (discussionType != null && discussionType != ""){
	  					payload ["discussion_type"] = discussionType;
	  				}
	  				if (published != null && published != ""){
	  					payload ["published"] = published;
	  				}
	  				if (delayedPostAt != null && delayedPostAt != ""){
	  					payload ["delayed_post_at"] = delayedPostAt;
	  				}
	  				if (lockAt != null && lockAt != ""){
	  					payload ["lock_at"] = lockAt;
	  				}
	  				if (podcastEnabled != null && podcastEnabled != ""){
	  					payload ["podcast_enabled"] = podcastEnabled;
	  				}
	  				if (podcastHasStudentPosts != null && podcastHasStudentPosts != ""){
	  					payload ["podcast_has_student_posts"] = podcastHasStudentPosts;
	  				}
	  				if (requireInitialPost != null && requireInitialPost != ""){
	  					payload ["require_initial_post"] = requireInitialPost;
	  				}
	  				if (isAnnouncement != null && isAnnouncement != ""){
	  					payload ["is_announcement"] = isAnnouncement;
	  				}
	  				if (positionAfter != null && positionAfter != ""){
	  					payload ["position_after"] = positionAfter;
	  				}
	  				if (groupCategoryId != null && groupCategoryId != ""){
	  					payload ["group_category_id"] = groupCategoryId;
	  				}
	  				if (assignmentName != null && assignmentName != ""){
	  					payload ["assignment[name]"] = assignmentName;
	  				}
        			if (assignmentPosition != null && assignmentPosition != ""){
	  					payload ["assignment[position]"] = assignmentPosition;
	  				}
	  				if (assignmentSubmissionTypes != null && assignmentSubmissionTypes != ""){
	  				var submissionTypesArray = eval('(' + assignmentSubmissionTypes + ')');
	  					payload ["assignment[submission_types]"] = ''+submissionTypesArray;
	  				}
	  				if (assignmentAllowedExtensions != null && assignmentAllowedExtensions != ""){

	  				var extensionArray = eval('(' + assignmentAllowedExtensions + ')');
	  					payload ["assignment[allowed_extensions]"] = ''+extensionArray;
	  				}
	  				if (assignmentTurnitinEnabled != null && assignmentTurnitinEnabled != ""){
	  					payload ["assignment[turnitin_enabled]"] = assignmentTurnitinEnabled;
	  				}
	  				if (assignmentTurnitinSettings != null && assignmentTurnitinSettings != ""){
	  					payload ["assignment[turnitin_settings]"] = assignmentTurnitinSettings;
	  				}
	  				if (assignmentIntegrationData != null && assignmentIntegrationData != ""){
	  					payload ["assignment[integration_data]"] = eval('(' + assignmentIntegrationData + ')');
	  				}
	  				if (assignmentIntegrationId != null && assignmentIntegrationId != ""){
	  					payload ["assignment[integration_id]"] = assignmentIntegrationId;
	  				}
	  				if (assignmentPeerReviews != null && assignmentPeerReviews != ""){
	  					payload ["assignment[peer_reviews]"] = assignmentPeerReviews;
	  				}
	  				if (assignmentAutomaticPeerReviews != null && assignmentAutomaticPeerReviews != ""){
	  					payload ["assignment[automatic_peer_reviews]"] = assignmentAutomaticPeerReviews;
	  				}
	  				if (assignmentNotifyOfUpdate != null && assignmentNotifyOfUpdate != ""){
	  					payload ["assignment[notify_of_update]"] = assignmentNotifyOfUpdate;
	  				}
	  				if (assignmentGroupCategoryId != null && assignmentGroupCategoryId != ""){
	  					payload ["assignment[group_category_id]"] = assignmentGroupCategoryId;
	  				}
	  				if (assignmentGradeGroupStudentsIndividually != null && assignmentGradeGroupStudentsIndividually != ""){
	  					payload ["assignment[grade_group_students_individually]"] = assignmentGradeGroupStudentsIndividually;
	  				}
        			if (assignmentExternalToolTagAttributes != null && assignmentExternalToolTagAttributes != ""){
	  					payload ["assignment[external_tool_tag_attributes]"] = assignmentExternalToolTagAttributes;
	  				}
	  				if (assignmentPointsPossible != null && assignmentPointsPossible != ""){
	  					payload ["assignment[points_possible]"] = assignmentPointsPossible;
	  				}
	  				if (assignmentGradingType != null && assignmentGradingType != ""){
	  					payload ["assignment[grading_type]"] = assignmentGradingType;
	  				}
	  				if (assignmentDueAt != null && assignmentDueAt != ""){
	  					payload ["assignment[due_at]"] = assignmentDueAt;
	  				}
	  				if (assignmentLockAt != null && assignmentLockAt != ""){
	  					payload ["assignment[lock_at]"] = assignmentLockAt;
	  				}
	  				if (assignmentUnlockAt != null && assignmentUnlockAt != ""){
	  					payload ["assignment[unlock_at]"] = assignmentUnlockAt;
	  				}
	  				if (assignmentDescription != null && assignmentDescription != ""){
	  					payload ["assignment[description]"] = assignmentDescription;
	  				}
	  				if (assignmentAssignmentGroupId != null && assignmentAssignmentGroupId != ""){
	  					payload ["assignment[assignment_group_id]"] = assignmentAssignmentGroupId;
	  				}
	  				if (assignmentMuted != null && assignmentMuted != ""){
	  					payload ["assignment[muted]"] = assignmentMuted;
	  				}
	  				if (assignmentAssignmentOverrides != null && assignmentAssignmentOverrides != ""){
	  					payload ["assignment[assignment_overrides]"] = eval('(' + assignmentAssignmentOverrides + ')');
	  				}
	  				if (assignmentOnlyVisibleToOverrides != null && assignmentOnlyVisibleToOverrides != ""){
	  					payload ["assignment[only_visible_to_overrides]"] = assignmentOnlyVisibleToOverrides;
	  				}
	  				if (assignmentPublished != null && assignmentPublished != ""){
	  					payload ["assignment[published]"] = assignmentPublished;
	  				}
	  				if (assignmentGradingStandardId != null && assignmentGradingStandardId != ""){
	  					payload ["assignment[grading_standard_id]"] = assignmentGradingStandardId;
	  				}
					mc.setPayloadJSON(payload);
					]]>
        </script>
        <property name="messageType" value="application/x-www-form-urlencoded"
                  scope="axis2"/>
        <property name="FORCE_POST_PUT_NOBODY" value="true" scope="axis2" type="BOOLEAN"/>
        <call>
            <endpoint>
                <http method="post"
                      uri-template="{uri.var.apiUrl}/courses/{+uri.var.courseId}/discussion_topics"/>
            </endpoint>
        </call>
        <!-- Remove custom header information in response -->
        <header name="ETag" action="remove" scope="transport"/>
        <header name="P3P" action="remove" scope="transport"/>
        <header name="X-Canvas-Meta" action="remove" scope="transport"/>
        <header name="X-Canvas-User-Id" action="remove" scope="transport"/>
        <header name="X-Frame-Options" action="remove" scope="transport"/>
        <header name="X-Rack-Cache" action="remove" scope="transport"/>
        <header name="X-Request-Context-Id" action="remove" scope="transport"/>
        <header name="X-Runtime" action="remove" scope="transport"/>
        <header name="X-Session-Id" action="remove" scope="transport"/>
        <header name="X-UA-Compatible" action="remove" scope="transport"/>
        <header name="WWW-Authenticate" action="remove" scope="transport"/>
        <header name="Via" action="remove" scope="transport"/>
    </sequence>
</template>