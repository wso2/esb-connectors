<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright (c)2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

    WSO2 Inc. licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file except
    in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
-->
<template name="createCourse" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="accountId" description="ID of the Canvas admin account to which the course belongs to."/>
    <parameter name="name" description="The name of the course. If omitted, the course will be named Unnamed Course."/>
    <parameter name="code" description="The course code for the course."/>
    <parameter name="startAt" description="Course start date in ISO8601 format, e.g. 2011-01-01T01:00Z"/>
    <parameter name="endAt" description="Course end date in ISO8601 format. e.g. 2011-01-01T01:00Z"/>
    <parameter name="license" description="The name of the licensing used when publishing the course."/>
    <parameter name="isPublic" description="Whether the course is public or private in Canvas."/>
    <parameter name="publicSyllabus" description="Set to true to make the course syllabus public."/>
    <parameter name="publicDescription" description="A publicly visible description of the course."/>
    <parameter name="allowStudentWikiEdits" description="If true, students will be able to modify the course wiki."/>
    <parameter name="allowWikiComments" description="If true, course members will be able to comment on wiki pages."/>
    <parameter name="allowStudentForumAttachments" description="If true, students can attach files to forum posts."/>
    <parameter name="openEnrollment" description="Set to true if the course is open enrollment."/>
    <parameter name="selfEnrollment" description="Set to true if the course is self enrollment."/>
    <parameter name="restrictEnrollmentsToCourseDates"
               description="Set to true to restrict user enrollments to the start and end dates of the course."/>
    <parameter name="termId" description="The unique ID of the term to create to course in."/>
    <parameter name="sisCourseId" description="The unique SIS identifier."/>
    <parameter name="integrationId" description="The unique Integration identifier."/>
    <parameter name="hideFinalGrades"
               description="If this option is set to true, the totals in student grades summary will be hidden."/>
    <parameter name="applyAssignmentGroupWeights"
               description="Set to true to weight final grade based on assignment groups percentages."/>
    <parameter name="gradingStandardId"
               description="The grading standard id to set for the course. If no value is provided for this argument the current grading_standard will be un-set from this course."/>
    <parameter name="syllabusBody" description="The syllabus body for the course."/>
    <parameter name="enrollMe" description="Set to true to enroll the current user as the teacher."/>
    <parameter name="offer"
               description="If this option is set to true, the course will be available to students immediately."/>
    <sequence>
        <property name="uri.var.accountId" expression="$func:accountId"/>
        <property name="uri.var.name" expression="$func:name"/>
        <property name="uri.var.code" expression="$func:code"/>
        <property name="uri.var.startAt" expression="$func:startAt"/>
        <property name="uri.var.endAt" expression="$func:endAt"/>
        <property name="uri.var.license" expression="$func:license"/>
        <property name="uri.var.isPublic" expression="$func:isPublic"/>
        <property name="uri.var.publicSyllabus" expression="$func:publicSyllabus"/>
        <property name="uri.var.publicDescription" expression="$func:publicDescription"/>
        <property name="uri.var.allowStudentWikiEdits" expression="$func:allowStudentWikiEdits"/>
        <property name="uri.var.allowWikiComments" expression="$func:allowWikiComments"/>
        <property name="uri.var.allowStudentForumAttachments" expression="$func:allowStudentForumAttachments"/>
        <property name="uri.var.openEnrollment" expression="$func:openEnrollment"/>
        <property name="uri.var.selfEnrollment" expression="$func:selfEnrollment"/>
        <property name="uri.var.restrictEnrollmentsToCourseDates" expression="$func:restrictEnrollmentsToCourseDates"/>
        <property name="uri.var.termId" expression="$func:termId"/>
        <property name="uri.var.sisCourseId" expression="$func:sisCourseId"/>
        <property name="uri.var.integrationId" expression="$func:integrationId"/>
        <property name="uri.var.hideFinalGrades" expression="$func:hideFinalGrades"/>
        <property name="uri.var.applyAssignmentGroupWeights" expression="$func:applyAssignmentGroupWeights"/>
        <property name="uri.var.gradingStandardId" expression="$func:gradingStandardId"/>
        <property name="uri.var.syllabusBody" expression="$func:syllabusBody"/>
        <property name="uri.var.enrollMe" expression="$func:enrollMe"/>
        <property name="uri.var.offer" expression="$func:offer"/>
        <script language="js">
            <![CDATA[
                var jsonPayload = new Object();
                
                var allowStudentForumAttachments = mc.getProperty('uri.var.allowStudentForumAttachments');
                var allowStudentWikiEdits = mc.getProperty('uri.var.allowStudentWikiEdits');
                var allowWikiComments = mc.getProperty('uri.var.allowWikiComments');
                var applyAssignmentGroupWeights = mc.getProperty('uri.var.applyAssignmentGroupWeights');
                var code = mc.getProperty('uri.var.code');
                var endAt = mc.getProperty('uri.var.endAt');
                var gradingStandardId = mc.getProperty('uri.var.gradingStandardId');
                var hideFinalGrades = mc.getProperty('uri.var.hideFinalGrades');
                var integrationId = mc.getProperty('uri.var.integrationId');
                var isPublic = mc.getProperty('uri.var.isPublic');
                var license = mc.getProperty('uri.var.license');
                var name = mc.getProperty('uri.var.name');
                var openEnrollment = mc.getProperty('uri.var.openEnrollment');
                var publicDescription = mc.getProperty('uri.var.publicDescription');
                var publicSyllabus = mc.getProperty('uri.var.publicSyllabus');
                var restrictEnrollmentsToCourseDates = mc.getProperty('uri.var.restrictEnrollmentsToCourseDates');
                var selfEnrollment = mc.getProperty('uri.var.selfEnrollment');
                var sisCourseId = mc.getProperty('uri.var.sisCourseId');
                var startAt = mc.getProperty('uri.var.startAt');
                var syllabusBody = mc.getProperty('uri.var.syllabusBody');
                var termId = mc.getProperty('uri.var.termId');
                var enrollMe = mc.getProperty('uri.var.enrollMe');
                var offer = mc.getProperty('uri.var.offer');
                
                if (allowStudentForumAttachments != null && allowStudentForumAttachments != ""){
                    jsonPayload["course[allow_student_forum_attachments]"] = allowStudentForumAttachments;
                }
                
                if (allowStudentWikiEdits != null && allowStudentWikiEdits != ""){
                    jsonPayload["course[allow_student_wiki_edits]"] = allowStudentWikiEdits;
                }
                
                if (allowWikiComments != null && allowWikiComments != ""){
                    jsonPayload["course[allow_wiki_comments]"] = allowWikiComments;
                }
                
                if (applyAssignmentGroupWeights != null && applyAssignmentGroupWeights != ""){
                    jsonPayload["course[apply_assignment_group_weights]"] = applyAssignmentGroupWeights;
                }
                
                if (code != null && code != ""){
                    jsonPayload["course[course_code]"] = code;
                }
                
                if (endAt != null && endAt != ""){
                    jsonPayload["course[end_at]"] = endAt;
                }
                
                if (gradingStandardId != null && gradingStandardId != ""){
                    jsonPayload["course[grading_standard_id]"] = gradingStandardId;
                }
                
                if (hideFinalGrades != null && hideFinalGrades != ""){
                    jsonPayload["course[hide_final_grades]"] = hideFinalGrades;
                }
                
                if (integrationId != null && integrationId != ""){
                    jsonPayload["course[integration_id]"] = integrationId;
                }
                
                if (isPublic != null && isPublic != ""){
                    jsonPayload["course[is_public]"] = isPublic;
                }
                
                if (license != null && license != ""){
                    jsonPayload["course[license]"] = license;
                }
                
                if (name != null && name != ""){
                    jsonPayload["course[name]"] = name;
                }
                
                if (openEnrollment != null && openEnrollment != ""){
                    jsonPayload["course[open_enrollment]"] = openEnrollment;
                }
                
                if (publicDescription != null && publicDescription != ""){
                    jsonPayload["course[public_description]"] = publicDescription;
                }
                
                if (publicSyllabus != null && publicSyllabus != ""){
                    jsonPayload["course[public_syllabus]"] = publicSyllabus;
                }
                
                if (restrictEnrollmentsToCourseDates != null && restrictEnrollmentsToCourseDates != ""){
                    jsonPayload["course[restrict_enrollments_to_course_dates]"] = restrictEnrollmentsToCourseDates;
                }
                
                if (selfEnrollment != null && selfEnrollment != ""){
                    jsonPayload["course[self_enrollment]"] = selfEnrollment;
                }
                
                if (sisCourseId != null && sisCourseId != ""){
                    jsonPayload["course[sis_course_id]"] = sisCourseId;
                }
                
                if (startAt != null && startAt != ""){
                    jsonPayload["course[start_at]"] = startAt;
                }
                
                if (syllabusBody != null && syllabusBody != ""){
                    jsonPayload["course[syllabus_body]"] = syllabusBody;
                }
                
                if (termId != null && termId != ""){
                    jsonPayload["course[term_id]"] = termId;
                }
                
                if (enrollMe != null && enrollMe != ""){
                    jsonPayload["enroll_me"] = enrollMe;
                }
                
                if (offer != null && offer != ""){
                    jsonPayload["offer"] = offer;
                }
                
                mc.setPayloadJSON(jsonPayload);
            ]]>
        </script>
        <!-- Set the axis2 property 'messageType' to application/x-www-form-urlencoded -->
        <property name="messageType" value="application/x-www-form-urlencoded" scope="axis2"/>
        <property name="FORCE_POST_PUT_NOBODY" value="true" scope="axis2" type="BOOLEAN"/>
        <call>
            <endpoint>
                <http method="post" uri-template="{uri.var.apiUrl}/accounts/{+uri.var.accountId}/courses"/>
            </endpoint>
        </call>
        <!-- Remove custom Headers from the API Response -->
        <header name="ETag" action="remove" scope="transport"/>
        <header name="P3P" action="remove" scope="transport"/>
        <header name="X-Canvas-Meta" action="remove" scope="transport"/>
        <header name="X-Canvas-User-Id" action="remove" scope="transport"/>
        <header name="X-Frame-Options" action="remove" scope="transport"/>
        <header name="X-Rack-Cache" action="remove" scope="transport"/>
        <header name="X-Request-Context-Id" action="remove" scope="transport"/>
        <header name="X-Runtime" action="remove" scope="transport"/>
        <header name="X-Session-Id" action="remove" scope="transport"/>
        <header name="X-UA-Compatible" action="remove" scope="transport"/>
        <header name="Via" action="remove" scope="transport"/>
        <header name="WWW-Authenticate" action="remove" scope="transport"/>
    </sequence>
</template>
