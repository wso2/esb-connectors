<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

   WSO2 Inc. licenses this file to you under the Apache License,
   Version 2.0 (the "License"); you may not use this file except
   in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied. See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<template name="addRecords" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="module"
               description="The module specifies the which section entries should be added. e.g. JobOpenings, Candidates, Clients, ClientContacts."/>
    <parameter name="xmlData"
               description="The data to be used when create a record in JobOpenings, Candidates, Clients and ClientContacts."/>
    <parameter name="duplicateCheck"
               description="The duplicateCheck is used to confirm, whether the record exists or not. e.g. value '1' for error and '2' for update."/>
    <parameter name="wfTrigger"
               description="Set value as true to trigger the workflow rule while inserting record into Recruit account."/>
    <parameter name="isApproval"
               description="To keep the records in approval mode, set value as true."/>
    <parameter name="newFormat"
               description="To exclude fields with null values while fetching data from your Recruit account."/>
    <parameter name="version" description="This will fetch responses based on the API versions."/>

    <sequence>
        <property name="uri.var.module" expression="$func:module"/>
        <property name="uri.var.xmlData" expression="$func:xmlData"/>
        <property name="uri.var.wfTrigger" expression="$func:wfTrigger"/>
        <property name="uri.var.isApproval" expression="$func:isApproval"/>
        <property name="uri.var.duplicateCheck" expression="$func:duplicateCheck"/>
        <property name="uri.var.newFormat" expression="$func:newFormat"/>
        <property name="uri.var.version" expression="$func:version"/>
        <property name="uri.var.urlQuery" value=""/>
        <script language="js">
            <![CDATA[
            var xmlData = mc.getProperty('uri.var.xmlData');
            var wfTrigger = mc.getProperty('uri.var.wfTrigger');
            var isApproval = mc.getProperty('uri.var.isApproval');
            var duplicateCheck = mc.getProperty('uri.var.duplicateCheck');
            var newFormat = mc.getProperty('uri.var.newFormat');
            var version = mc.getProperty('uri.var.version');
            var urlQuery = "";
            if (wfTrigger != null && wfTrigger != "") {
               urlQuery += "wfTrigger=" + wfTrigger + '&';
            }
            if (isApproval != null && isApproval != "") {
               urlQuery += "isApproval=" + isApproval + '&';
            }
            if (duplicateCheck != null && duplicateCheck != "") {
               urlQuery += "duplicateCheck=" + duplicateCheck + '&';
            }
            if (newFormat != null && newFormat != "") {
               urlQuery += "newFormat=" + newFormat + '&';
            }
            if (version != null && version != "") {
               urlQuery += "version=" + version + '&';
            }
            if (urlQuery != "") {
               urlQuery = '&' + urlQuery.substring(0, urlQuery.length - 1);
               mc.setProperty('uri.var.urlQuery', urlQuery);
            }

            xmlData = xmlData.replace("\"", "'");
            mc.setProperty('uri.var.xmlData', xmlData);
         ]]>
        </script>
        <payloadFactory media-type="json">
            <format>
                { }
            </format>
        </payloadFactory>
        <property name="FORCE_POST_PUT_NOBODY" value="true" scope="axis2" type="BOOLEAN"/>
        <call>
            <endpoint>
                <http method="post"
                      uri-template="{uri.var.apiUrl}/recruit/private/{uri.var.responseFormat}/{uri.var.module}/addRecords?authtoken={uri.var.authToken}&amp;scope={uri.var.scope}&amp;xmlData={+uri.var.xmlData}&amp;{+uri.var.urlQuery}"/>
            </endpoint>
        </call>
        <!-- Removing custom headers -->
        <header name="Strict-Transport-Security" action="remove" scope="transport"/>
        <header name="X-XSS-Protection" action="remove" scope="transport"/>
        <header name="X-Content-Type-Options" action="remove" scope="transport"/>
        <header name="Pragma" action="remove" scope="transport"/>
        <header name="Cache-Control" action="remove" scope="transport"/>
    </sequence>
</template>