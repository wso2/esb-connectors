<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (c) 2005-2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

   WSO2 Inc. licenses this file to you under the Apache License,
   Version 2.0 (the "License"); you may not use this file except
   in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<!-- API method Url: http://api.planyo.com/api.php?topic=make_reservation -->
<template name="createReservation" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="resourceId" description="The identifier of the resource to be reserved"/>
    <parameter name="startTime" description="The startTime defines the begining of the rental"/>
    <parameter name="endTime" description="The endTime defines the end of the rental"/>
    <parameter name="quantity" description="Number of units to be reserved"/>
    <parameter name="isAdminMode"
               description="The isAdminMode boolean value defines weather the reservation is done in admin mode or not, defaults to false"/>
    <parameter name="sendNotifications"
               description="The sendNotifications boolean defines weather to send customer notifications or not, defaults to true"/>
    <parameter name="forceStatus" description="The forceStatus forces the Reservation status"/>
    <parameter name="sharingMode" description="Sets the Sharing mode, valid values are 0,1,2"/>
    <parameter name="rentalProperties"
               description="The rentalProperties object consists resource specific additional fields to be set"/>
    <parameter name="voucherCode" description="Specifies a voucher code to the Reservation"/>
    <parameter name="email" description="The email of the user"/>
    <parameter name="firstName" description="The First Name of the user"/>
    <parameter name="lastName" description="The Last Name of the user"/>
    <parameter name="address" description="The Address of the user"/>
    <parameter name="city" description="The City of the user"/>
    <parameter name="zip" description="The Zip Code of the user"/>
    <parameter name="state" description="The State of the user"/>
    <parameter name="country"
               description="A two letter Country code of the user according to ISO 3166-1 alpha-2 format"/>
    <parameter name="phonePrefix" description="The User's Phone's Country code (e.g. 1 for USA and Canada)"/>
    <parameter name="phoneNumber" description="The User's Phone Number of the user without the country code"/>
    <parameter name="mobilePrefix" description="The User's Mobile number's Country code (e.g. 1 for USA and Canada)"/>
    <parameter name="mobileNumber" description="The User's Mobile Number of the user without the country code"/>
    <parameter name="userNotes" description="Specifies the User's notes at the time of reservation"/>
    <parameter name="adminNotes" description="Specifies the Admin notes at the time of reservation"/>
    <parameter name="cartId"
               description="Shopping cart identifier, this is only valid if the site works with Shopping carts"/>
    <parameter name="firstReservationId"
               description="Specifies a previous reservation identifier belonging to the Shopping cart specified by cartId parameter"/>
    <parameter name="assignments" description="This object specifies the units to be reserved "/>
    <sequence>
        <property name="uri.var.resourceId" expression="$func:resourceId"/>
        <property name="uri.var.startTime" expression="$func:startTime"/>
        <property name="uri.var.endTime" expression="$func:endTime"/>
        <property name="uri.var.quantity" expression="$func:quantity"/>
        <property name="uri.var.isAdminMode" expression="$func:isAdminMode"/>
        <property name="uri.var.sendNotifications" expression="$func:sendNotifications"/>
        <property name="uri.var.forceStatus" expression="$func:forceStatus"/>
        <property name="uri.var.sharingMode" expression="$func:sharingMode"/>
        <property name="uri.var.rentalProperties" expression="$func:rentalProperties"/>
        <property name="uri.var.voucherCode" expression="$func:voucherCode"/>
        <property name="uri.var.email" expression="$func:email"/>
        <property name="uri.var.firstName" expression="$func:firstName"/>
        <property name="uri.var.lastName" expression="$func:lastName"/>
        <property name="uri.var.address" expression="$func:address"/>
        <property name="uri.var.city" expression="$func:city"/>
        <property name="uri.var.zip" expression="$func:zip"/>
        <property name="uri.var.state" expression="$func:state"/>
        <property name="uri.var.country" expression="$func:country"/>
        <property name="uri.var.phonePrefix" expression="$func:phonePrefix"/>
        <property name="uri.var.phoneNumber" expression="$func:phoneNumber"/>
        <property name="uri.var.mobilePrefix" expression="$func:mobilePrefix"/>
        <property name="uri.var.mobileNumber" expression="$func:mobileNumber"/>
        <property name="uri.var.userNotes" expression="$func:userNotes"/>
        <property name="uri.var.adminNotes" expression="$func:adminNotes"/>
        <property name="uri.var.cartId" expression="$func:cartId"/>
        <property name="uri.var.firstReservationId" expression="$func:firstReservationId"/>
        <property name="uri.var.assignments" expression="$func:assignments"/>
        <!-- Generate the request payload with mandatory parameters -->
        <payloadFactory media-type="json">
            <format>
                {
                "resource_id":"$1",
                "start_time":"$2",
                "end_time":"$3",
                "first_name":"$4",
                "api_key":"$5",
                "method":"make_reservation"
                }
            </format>
            <args>
                <arg expression="get-property('uri.var.resourceId')"/>
                <arg expression="get-property('uri.var.startTime')"/>
                <arg expression="get-property('uri.var.endTime')"/>
                <arg expression="get-property('uri.var.firstName')"/>
                <arg expression="get-property('uri.var.apiKey')"/>
            </args>
        </payloadFactory>
        <script language="js">
            <![CDATA[
            // Generate payload with optional parameters
            var quantity = mc.getProperty('uri.var.quantity');
            var isAdminMode = mc.getProperty('uri.var.isAdminMode');
            var sendNotifications = mc.getProperty('uri.var.sendNotifications');
            var forceStatus = mc.getProperty('uri.var.forceStatus');
            var sharingMode = mc.getProperty('uri.var.sharingMode');
            var rentalProperties = mc.getProperty('uri.var.rentalProperties');
            var voucherCode = mc.getProperty('uri.var.voucherCode');
            var email = mc.getProperty('uri.var.email');
            var lastName = mc.getProperty('uri.var.lastName');
            var address = mc.getProperty('uri.var.address');
            var city = mc.getProperty('uri.var.city');
            var zip = mc.getProperty('uri.var.zip');
            var state = mc.getProperty('uri.var.state');
            var country = mc.getProperty('uri.var.country');
            var phonePrefix = mc.getProperty('uri.var.phonePrefix');       
            var phoneNumber = mc.getProperty('uri.var.phoneNumber');
            var mobilePrefix = mc.getProperty('uri.var.mobilePrefix');
            var mobileNumber = mc.getProperty('uri.var.mobileNumber');
            var userNotes = mc.getProperty('uri.var.userNotes');
            var adminNotes = mc.getProperty('uri.var.adminNotes');
            var cartId = mc.getProperty('uri.var.cartId');
            var firstReservationId = mc.getProperty('uri.var.firstReservationId');
            var assignments = mc.getProperty('uri.var.assignments');
            var language = mc.getProperty('uri.var.language');
            var version = mc.getProperty('uri.var.version');
            // Retrieve payload to set custom properties
            payload = mc.getPayloadJSON();
            if (quantity != null && quantity != "") {
               payload.quantity = quantity;
            }           
            if (isAdminMode != null && isAdminMode != "") {
               payload.admin_mode = isAdminMode;
            }           
            if (sendNotifications != null && sendNotifications != "") {
               payload.send_notifications = sendNotifications;
            }           
            if (forceStatus != null && forceStatus != "") {
               payload.force_status = forceStatus;
            }           
            if (sharingMode != null && sharingMode != "") {
               payload.wants_share = sharingMode;
            }
            if (voucherCode != null && voucherCode != "") {
               payload.rental_prop_voucher = voucherCode;
            }           
            if (email != null && email != "") {
               payload.email = email;
            }           
            if (lastName != null && lastName != "") {
               payload.last_name = lastName;
            }           
            if (address != null && address != "") {
               payload.address = address;
            }           
            if (city != null && city != "") {
               payload.city = city;
            }           
            if (zip != null && zip != "") {
               payload.zip = zip;
            }           
            if (state != null && state != "") {
               payload.state = state;
            }           
            if (country != null && country != "") {
               payload.country = country;
            }           
            if (phonePrefix != null && phonePrefix != "") {
               payload.phone_prefix = phonePrefix;
            }           
            if (phoneNumber != null && phoneNumber != "") {
               payload.phone_number = phoneNumber;
            }           
            if (mobilePrefix != null && mobilePrefix != "") {
               payload.mobile_prefix = mobilePrefix;
            }           
            if (mobileNumber != null && mobileNumber != "") {
               payload.mobile_number = mobileNumber;
            }           
            if (userNotes != null && userNotes != "") {
               payload.user_notes = userNotes;
            }           
            if (adminNotes != null && adminNotes != "") {
               payload.admin_notes = adminNotes;
            }           
            if (cartId != null && cartId != "") {
               payload.cart_id = cartId;
            }           
            if (firstReservationId != null && firstReservationId != "") {
               payload.first_reservation_id = firstReservationId;
            }
            if (language != null && language != "") {
               payload.language = language;
            }
            if (version != null && version != "") {
               payload.version = version;
            }
            // Retrieves values from JSON objects and appends key values pairs to the payload            
            if (assignments != null && assignments != "") {
               var assignmentsObj = eval("(" + assignments + ")");
               for (var key in assignmentsObj) {
                  if (key != null && key != "") {
                     // Added toString to avoid trailing 0's being appended to integers
                     payload[key] = assignmentsObj[key].toString();   
                  }
               }
            }
            if (rentalProperties != null && rentalProperties != "") {
               var rentalPropertiesObj = eval("(" + rentalProperties + ")");
               for (var key in rentalPropertiesObj) {
                  if (key != null && key != "") {
                     // Added toString to avoid trailing 0's being appended to integers
                     payload[key] = rentalPropertiesObj[key].toString();   
                  }
               }
            }
            mc.setPayloadJSON(payload);
         ]]>
        </script>
        <property name="messageType" value="application/x-www-form-urlencoded" scope="axis2"/>
        <call>
            <endpoint>
                <http method="post" uri-template="{uri.var.apiUrl}"/>
            </endpoint>
        </call>
        <!-- Remove response custom header information -->
        <header name="X-Powered-By" scope="transport" action="remove"/>
        <header name="Via" scope="transport" action="remove"/>
    </sequence>
</template>