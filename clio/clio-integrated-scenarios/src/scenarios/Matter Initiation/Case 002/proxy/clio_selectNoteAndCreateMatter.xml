<?xml version="1.0" encoding="UTF-8"?>
<proxy xmlns="http://ws.apache.org/ns/synapse" name="clio_selectNoteAndCreateMatter" transports="https,http"
   statistics="disable" trace="disable" startOnLoad="true">
   <target>
      <inSequence onError="faultHandlerSeq">
         <sequence key="scenarioConstants" />

         <!-- Freshdesk Properties -->
         <property name="simplenote.apiUrl" expression="json-eval($.simplenoteApiUrl)" />
         <property name="simplenote.authToken" expression="json-eval($.simplenoteAuthToken)" />
         <property name="simplenote.email" expression="json-eval($.simplenoteEmail)" />
		 
		 <!-- By default, a new note will be created unless the previous active note was left intact. This is achieved by specifying 'true' for the value. -->
         <property name="simplenote.createNewNote" value="true" />

         <!-- SurveyGizmo Properties -->
         <property name="clio.apiUrl" expression="json-eval($.clioApiUrl)" />
         <property name="clio.accessToken" expression="json-eval($.clioAccessToken)" />
         <!-- Operation scoped properties -->
         <property name="responseString" value="" scope="operation" />
         <property name="activityName" value="clio_selectNoteAndCreateMatter" scope="operation" />
         <property name="noOfContacts" expression="count(//jsonObject/clioContacts)" scope="operation" />
         <property name="contactIndex" expression="0" scope="operation" />

         <!--START: Proceed with the scenario only if at least one Clio contactID is provided. -->
         <filter source="get-property('operation', 'noOfContacts')" regex="0.0">
            <then>
               <payloadFactory media-type="json">
                  <format>{
                     "Response":{
						 "activity":"clio_selectNoteAndCreateMatter",
						 "activityResponse":"clioContacts array is empty - No entries to process."
						 }
                     }
                  </format>
               </payloadFactory>
               <respond />
            </then>
            <else>
               <!--FOR EACH Clio Contact ID given in the Array: BEGIN -->
               <iterate continueParent="false" id="noteKeys" expression="//jsonObject/clioContacts" sequential="true">
                  <target>
                     <sequence>
                        <property name="clio.contactId" expression="//clioContacts/clioContactID/text()" />
                        <property name="clio.createMatter" expression="//clioContacts/createMatter/text()" />
                        <property name="id" expression="fn:concat('clio_contactId:', get-property('clio.contactId'))" />

                        <!-- Get the Contact from Clio -->
                        <clio.init>
                           <apiUrl>{$ctx:clio.apiUrl}</apiUrl>
                           <accessToken>{$ctx:clio.accessToken}</accessToken>
                        </clio.init>
                        <clio.getContact>
                           <contactId>{$ctx:clio.contactId}</contactId>
                        </clio.getContact>
                        <sequence key="removeResponseHeaders" />

                        <property name="clio.contactId" expression="json-eval($.contact.id)" />
                        <property name="clio.contactFirstName" expression="json-eval($.contact.first_name)" />
                        <property name="clio.contactLastName" expression="json-eval($.contact.last_name)" />

                        <!-- START: Create the note as matter only if the user has specified 'createMatter=true'. -->
                        <filter source="fn:lower-case(get-property('clio.createMatter'))" regex="true">
                           <then>
                              <!-- START: Create the note as matter only if the contact exists. -->
                              <filter source="boolean(get-property('clio.contactId'))" regex="true">
                                 <then>
                                    <property name="clio.customFieldArray" expression="json-eval($.contact.custom_field_values)" />

                                    <!--START: Proceed with extracting the note key from the contact details only if 'custom_field_values'
                                       are present in the response. Custom fields are not returned if the contact doesn't
                                       have a non-empty value for it. -->
                                    <filter source="boolean(get-property('clio.customFieldArray'))" regex="false">
                                       <then>
                                          <!--Call the Response Handler Template -->
                                          <call-template target="responseHandlerTemplate">
                                             <with-param name="activity" value="clio_getCustomFieldArray" />
                                             <with-param name="id" value="{$ctx:id}" />
                                             <with-param name="status" value="{$ctx:status.failure}" />
                                             <with-param name="message" value="{$ctx:message.clio.noCustomFieldsFound}" />
                                          </call-template>
                                       </then>
                                       <else>

                                          <!-- Script Mediator to iterate through the custom fields and extract the required
                                             note key. -->
                                          <script language="js">
													  <![CDATA[														 
														 var customFieldArray = eval("(" + mc.getProperty('clio.customFieldArray') + ")");
														 var simpleNoteCustomFieldName = mc.getProperty('clio.simpleNoteCustomFieldName');
														 for(var i=0; i<customFieldArray.length; i++){
															if(customFieldArray[i].custom_field.name.toLowerCase() == simpleNoteCustomFieldName.toLowerCase()){
																mc.setProperty('simplenote.noteKey', customFieldArray[i].value);
																break;
															}
														 }												   
													  ]]>
                                          </script>

                                          <!--START: Proceed to create the matter only if the SimpleNote note key is found
                                             on the contact. -->
                                          <filter source="boolean(get-property('simplenote.noteKey'))" regex="false">
                                             <then>
                                                <!--Call the Response Handler Template -->
                                                <call-template target="responseHandlerTemplate">
                                                   <with-param name="activity" value="clio_getCustomFieldValue" />
                                                   <with-param name="id" value="{$ctx:id}" />
                                                   <with-param name="status" value="Failure" />
                                                   <with-param name="message"
                                                      value="{$ctx:message.clio.requiredCustomFieldNotFound}" />
                                                </call-template>
                                             </then>
                                             <else>

                                                <!-- Get the Note from SimpleNote. -->
                                                <simplenote.init>
                                                   <authToken>{$ctx:simplenote.authToken}</authToken>
                                                   <email>{$ctx:simplenote.email}</email>
                                                   <apiUrl>{$ctx:simplenote.apiUrl}</apiUrl>
                                                </simplenote.init>
                                                <simplenote.getNote>
                                                   <noteKey>{$ctx:simplenote.noteKey}</noteKey>
                                                </simplenote.getNote>
                                                <sequence key="removeResponseHeaders" />

                                                <property name="binaryString" expression="json-eval($.binary)" />

                                                <!--Base64Decode and get the JSON object from Base64Encoded String - Issue
                                                   caused by Content-Type: text/html response header. -->
                                                <script language="js">
															  <![CDATA[
																 function base64_decode(data) {
																   var b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
																   var o1, o2, o3, h1, h2, h3, h4, bits, i = 0, ac = 0, dec = '', tmp_arr = [];
												  
																   if (data.trim().length == 0) {
																	return data;
																   } else {
																	data += '';
																   }
																   
																   do {
																	// unpack four hexets into three octets using index points in b64
																	h1 = b64.indexOf(data.charAt(i++));
																	h2 = b64.indexOf(data.charAt(i++));
																	h3 = b64.indexOf(data.charAt(i++));
																	h4 = b64.indexOf(data.charAt(i++));
												  
																	bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;
												  
																	o1 = bits >> 16 & 0xff;
																	o2 = bits >> 8 & 0xff;
																	o3 = bits & 0xff;
												  
																	if (h3 == 64) {
																	  tmp_arr[ac++] = String.fromCharCode(o1);
																	} else if (h4 == 64) {
																	  tmp_arr[ac++] = String.fromCharCode(o1, o2);
																	} else {
																	  tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);
																	}
																   } while (i < data.length);
												  
																   dec = tmp_arr.join('');
												  
																   return dec.replace(/\0+$/, '');
																 }
																 
																 var binaryString = mc.getProperty('binaryString');
																 
																 if(binaryString != null && binaryString != ""){
																	var jsonString = base64_decode(binaryString);
																	var responseObject = eval("(" + jsonString + ")");
																	mc.setProperty('noteContent', responseObject.content);
																	mc.setProperty('tagName', responseObject.tags[0]);
																 }
														   
															  ]]>
                                                </script>

                                                <property name="initialContent"
                                                   expression="fn:concat('Active note for ', get-property('clio.contactFirstName'), ' ', get-property('clio.contactLastName'), '...')" />

                                                <!--START: Proceed to create the Matter only if the note is not empty. -->
                                                <filter
                                                   xpath="fn:lower-case(get-property('noteContent')) = fn:lower-case(get-property('initialContent'))">
                                                   <then>
                                                      <property name="simplenote.createNewNote" value="false" />
                                                      <property name="id"
                                                         expression="fn:concat('simplenote_notKey:', get-property('simplenote.noteKey'), ',clio_contactId:', get-property('clio.contactId'))" />
                                                      <!--Call the Response Handler Template -->
                                                      <call-template target="responseHandlerTemplate">
                                                         <with-param name="activity" value="simplenote_getNoteContent" />
                                                         <with-param name="id" value="{$ctx:id}" />
                                                         <with-param name="status" value="{$ctx:status.skipped}" />
                                                         <with-param name="message"
                                                            value="{$ctx:message.clio.caseInformationNotAdded}" />
                                                      </call-template>
                                                   </then>
                                                   <else>
                                                      <property name="openDate"
                                                         expression="get-property('SYSTEM_DATE', 'yyyy-MM-dd')" />

                                                      <!--Create the Matter with the contents of the Note. -->
                                                      <clio.init>
                                                         <apiUrl>{$ctx:clio.apiUrl}</apiUrl>
                                                         <accessToken>{$ctx:clio.accessToken}</accessToken>
                                                      </clio.init>
                                                      <clio.createMatter>
                                                         <clientId>{$ctx:clio.contactId}</clientId>
                                                         <status>Open</status>
                                                         <description>{$ctx:noteContent}</description>
                                                         <openDate>{$ctx:openDate}</openDate>
                                                         <billable>true</billable>
                                                      </clio.createMatter>
                                                      <sequence key="removeResponseHeaders" />

                                                      <property name="clioMatterId" expression="json-eval($.matter.id)" />

                                                      <!--START: Proceed to add the Note to 'Selected-Notes' tag only if
                                                         the matter was created successfully. -->
                                                      <filter source="boolean(get-property('clioMatterId'))"
                                                         regex="false">
                                                         <then>
                                                            <property name="id"
                                                               expression="fn:concat('clio_contactId:', get-property('clio.contactId'))" />
                                                            <property name="errorResponse" expression="json-eval($)" />

                                                            <!--Call the Response Handler Template -->
                                                            <call-template target="responseHandlerTemplate">
                                                               <with-param name="activity" value="clio_createMatter" />
                                                               <with-param name="id" value="{$ctx:id}" />
                                                               <with-param name="status" value="{$ctx:status.failure}" />
                                                               <with-param name="message" value="{$ctx:errorResponse}" />
                                                            </call-template>
                                                         </then>
                                                         <else>
                                                            <property name="tags"
                                                               expression="fn:concat('[&quot;', get-property('tagName'), '&quot;,&quot;Selected-Notes&quot;]')" />

                                                            <!-- Update the Note to 'Selected-Notes' -->
                                                            <simplenote.init>
                                                               <authToken>{$ctx:simplenote.authToken}</authToken>
                                                               <email>{$ctx:simplenote.email}</email>
                                                               <apiUrl>{$ctx:simplenote.apiUrl}</apiUrl>
                                                            </simplenote.init>
                                                            <simplenote.updateNote>
                                                               <content>{$ctx:noteContent}</content>
                                                               <tags>{$ctx:tags}</tags>
                                                               <noteKey>{$ctx:simplenote.noteKey}</noteKey>
                                                            </simplenote.updateNote>
                                                            <sequence key="removeResponseHeaders" />

                                                            <property name="statusCode" expression="$axis2:HTTP_SC" />
                                                            <property name="id"
                                                               expression="fn:concat('clio_contactId:', get-property('clio.contactId'), ',clio_matterId:', get-property('clioMatterId'), ',simplenote_noteKey:', get-property('simplenote.noteKey'))" />

                                                            <filter source="get-property('statusCode')" regex="2[0-9][0-9]">
                                                               <then>
                                                                  <property name="status"
                                                                     expression="get-property('status.success')" />
                                                                  <property name="message"
                                                                     expression="get-property('message.clio.matterCreated')" />
                                                               </then>
                                                               <else>
                                                                  <property name="status"
                                                                     expression="get-property('status.failure')" />
                                                                  <property name="message"
                                                                     expression="get-property('message.clio.tagUpdationFailed')" />
                                                               </else>
                                                            </filter>

                                                            <!--Call the Response Handler Template -->
                                                            <call-template target="responseHandlerTemplate">
                                                               <with-param name="activity"
                                                                  value="clio_selectNoteAndCreateMatter" />
                                                               <with-param name="id" value="{$ctx:id}" />
                                                               <with-param name="status" value="{$ctx:status}" />
                                                               <with-param name="message" value="{$ctx:message}" />
                                                            </call-template>

                                                         </else>
                                                      </filter>
                                                      <!--END: Proceed to add the Note to 'Selected-Notes' tag only if the
                                                         matter was created successfully. -->
                                                   </else>
                                                </filter>
                                                <!--END: Proceed to create the Matter only if the note is not empty. -->
                                             </else>
                                          </filter>
                                          <!--END: Proceed to create the matter only if the SimpleNote note ket is found
                                             on the contact. -->
                                       </else>
                                    </filter>
                                    <!--END: Proceed with extracting the note key from the contact details only if 'custom_field_values'
                                       are present in the response. Custom fields are not returned if the contact doesn't
                                       have a non-empty value for it. -->
                                 </then>
                              </filter>
                              <!-- END: Create the note as matter only if the contact exists. -->
                           </then>
                        </filter>
                        <!-- END: Create the note as matter only if the user has specified 'createMatter=true' -->

                        <!-- START: Create a empty note if the Contact ID is valid. -->
                        <filter source="get-property('simplenote.createNewNote')" regex="true">
                           <then>
                              <!-- Invalidate the Property to prevent ambiguity. -->
                              <property name="uri.var.content" action="remove" />

                              <property name="tags"
                                 expression="fn:concat('[&quot;', get-property('clio.contactFirstName'), '-', get-property('clio.contactLastName'), '&quot;]')" />
                              <property name="initialContent"
                                 expression="fn:concat('Active note for ', get-property('clio.contactFirstName'), ' ', get-property('clio.contactLastName'), '...')" />

                              <!-- Create a BLANK note for the Contact. -->
                              <simplenote.init>
                                 <authToken>{$ctx:simplenote.authToken}</authToken>
                                 <email>{$ctx:simplenote.email}</email>
                                 <apiUrl>{$ctx:simplenote.apiUrl}</apiUrl>
                              </simplenote.init>
                              <simplenote.createNote>
                                 <content>{$ctx:initialContent}</content>
                                 <tags>{$ctx:tags}</tags>
                              </simplenote.createNote>
                              <sequence key="removeResponseHeaders" />

                              <property name="statusCode" expression="$axis2:HTTP_SC" />

                              <!--START: Proceed to update the contact if the note was created successfully -->
                              <filter source="get-property('statusCode')" regex="200">
                                 <then>

                                    <property name="binaryString" expression="json-eval($.binary)" />

                                    <!--Base64Decode and get the JSON object from Base64Encoded String - Issue caused by
                                       Content-Type: text/html response header. -->
                                    <script language="js">
															  <![CDATA[
																 function base64_decode(data) {
																   var b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
																   var o1, o2, o3, h1, h2, h3, h4, bits, i = 0, ac = 0, dec = '', tmp_arr = [];
												  
																   if (data.trim().length == 0) {
																	return data;
																   } else {
																	data += '';
																   }
																   
																   do {
																	// unpack four hexets into three octets using index points in b64
																	h1 = b64.indexOf(data.charAt(i++));
																	h2 = b64.indexOf(data.charAt(i++));
																	h3 = b64.indexOf(data.charAt(i++));
																	h4 = b64.indexOf(data.charAt(i++));
												  
																	bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;
												  
																	o1 = bits >> 16 & 0xff;
																	o2 = bits >> 8 & 0xff;
																	o3 = bits & 0xff;
												  
																	if (h3 == 64) {
																	  tmp_arr[ac++] = String.fromCharCode(o1);
																	} else if (h4 == 64) {
																	  tmp_arr[ac++] = String.fromCharCode(o1, o2);
																	} else {
																	  tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);
																	}
																   } while (i < data.length);
												  
																   dec = tmp_arr.join('');
												  
																   return dec.replace(/\0+$/, '');
																 }
																 
																 var binaryString = mc.getProperty('binaryString');
																 
																 if(binaryString != null && binaryString != ""){
																	var jsonString = base64_decode(binaryString);
																	var responseObject = eval("(" + jsonString + ")");
																	mc.setPayloadJSON(responseObject);
																 }
														   
															  ]]>
                                    </script>
                                    <property name="noteKey" expression="//key/text()" />

                                    <call-template target="getCustomFieldId">
                                       <with-param name="apiUrl" value="{$ctx:clio.apiUrl}" />
                                       <with-param name="accessToken" value="{$ctx:clio.accessToken}" />
                                       <with-param name="customFieldName" value="{$ctx:clio.simpleNoteCustomFieldName}" />
                                    </call-template>

                                    <property name="customFieldValues"
                                       expression="fn:concat('[{&quot;custom_field&quot;:{&quot;id&quot;:', get-property('clio.customFieldId'),'},&quot;value&quot;:&quot;', get-property('noteKey'),'&quot;}]')" />

                                    <!-- Update the custom field of the contact in Clio -->
                                    <clio.init>
                                       <apiUrl>{$ctx:clio.apiUrl}</apiUrl>
                                       <accessToken>{$ctx:clio.accessToken}</accessToken>
                                    </clio.init>
                                    <clio.updateContact>
                                       <contactId>{$ctx:clio.contactId}</contactId>
                                       <customFieldValues>{$ctx:customFieldValues}</customFieldValues>
                                    </clio.updateContact>
                                    <sequence key="removeResponseHeaders" />

                                    <property name="clio.contactId" expression="json-eval($.contact.id)" />

                                    <!-- START: Inform the user only if the update fails. -->
                                    <filter source="boolean(get-property('clio.contactId'))" regex="false">
                                       <then>
                                          <property name="errorResponse" expression="json-eval($)" />

                                          <!--Call the Response Handler Template -->
                                          <call-template target="responseHandlerTemplate">
                                             <with-param name="activity" value="clio_updateContactIdWithNoteKey" />
                                             <with-param name="id" value="{$ctx:id}" />
                                             <with-param name="status" value="{$ctx:status.failure}" />
                                             <with-param name="message" value="{$ctx:errorResponse}" />
                                          </call-template>
                                       </then>
                                    </filter>
                                    <!-- END: Inform the user only if the update fails. -->
                                 </then>
                                 <else>
                                    <!--Call the Response Handler Template -->
                                    <call-template target="responseHandlerTemplate">
                                       <with-param name="activity" value="simplenote_createNewNote" />
                                       <with-param name="id" value="{$ctx:id}" />
                                       <with-param name="status" value="{$ctx:status.failure}" />
                                       <with-param name="message" value="{$ctx:message.simplenoteNoteFailed}" />
                                    </call-template>
                                 </else>
                              </filter>
                              <!--END: Proceed to update the contact if the note was created successfully -->
                           </then>
                        </filter>
                        <!-- END: Create a empty note if the Contact ID is valid. -->

                        <!--Increment the Post Count -->
                        <property name="contactIndex" expression="get-property('operation','contactIndex') + 1"
                           scope="operation" />
                     </sequence>
                  </target>
               </iterate>
               <!--FOR EACH Clio Contact ID given in the Array: BEGIN -->
               <filter xpath="get-property('operation', 'contactIndex') = get-property('operation', 'noOfContacts')">
                  <then>
                     <loopback />
                  </then>
               </filter>

            </else>
         </filter>
         <!--END: Proceed with the scenario only if at least one Clio contactID is provided. -->
      </inSequence>
      <outSequence>
         <payloadFactory media-type="json">
            <format>{
               "Response":{
				   "activity":"clio_selectNoteAndCreateMatter",
				   "activityResponse":[$1]
				   }
               }
            </format>
            <args>
               <arg expression="get-property('operation','responseString')" />
            </args>
         </payloadFactory>
         <property name="messageType" value="application/json" scope="axis2" />
         <send />
      </outSequence>
   </target>
   <description />
</proxy>