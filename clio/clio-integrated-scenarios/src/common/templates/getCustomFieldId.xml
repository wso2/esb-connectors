<?xml version="1.0" encoding="UTF-8"?>
<!--This template retrieves the ID of the custom field whose name is passed as value for 'customFieldName' and stores it in a property called 'clio.customFieldId'-->
<template name="getCustomFieldId" xmlns="http://ws.apache.org/ns/synapse">
   <parameter name="apiUrl" description="ID of the task whose details should be retrieved." />
   <parameter name="accessToken" description="ID of the task whose details should be retrieved." />
   <parameter name="customFieldName" description="ID of the task whose details should be retrieved." />
   <sequence>
      <property name="uri.var.apiUrl" expression="$func:apiUrl" />
      <property name="uri.var.accessToken" expression="$func:accessToken" />
      <property name="uri.var.customFieldName" expression="$func:customFieldName" />

	  <!-- Add the Authorization Header for OAuth 2.0 -->
      <header name="Authorization" expression="fn:concat('Bearer ', get-property('uri.var.accessToken'))"
               scope="transport" />

      <call>
         <endpoint>
            <http method="get" uri-template="{uri.var.apiUrl}/api/v2/custom_fields" />
         </endpoint>
      </call>

      <!-- Remove custom Headers from the API Response -->
      <header name="Vary" action="remove" scope="transport" />
      <header name="X-Frame-Options" action="remove" scope="transport" />
      <header name="X-UA-Compatible" action="remove" scope="transport" />
      <header name="Cache-Control" action="remove" scope="transport" />
      <header name="X-Request-Id" action="remove" scope="transport" />
      <header name="Strict-Transport-Security" action="remove" scope="transport" />
      <header name="ETag" action="remove" scope="transport" />
      <header name="Status" action="remove" scope="transport" />

      <!--Removing the remaining standard headers to prevent ambiguity when chaining services. -->
      <sequence key="removeResponseHeaders" />

      <property name="uri.var.clio.customFieldArray" expression="json-eval($.custom_fields)" />

      <!-- Script Mediator to iterate through the custom fields and extract the required note key. -->
      <script language="js">
		<![CDATA[														 
			var customFieldArray = eval("(" + mc.getProperty('uri.var.clio.customFieldArray') + ")");
			var customFieldName = mc.getProperty('uri.var.customFieldName').toLowerCase();
			for(var i=0; i<customFieldArray.length; i++){
				if(customFieldArray[i].name.toLowerCase() == customFieldName){
					mc.setProperty('clio.customFieldId', customFieldArray[i].id);
					break;
				}
			}												   
		]]>
      </script>

   </sequence>
</template>
