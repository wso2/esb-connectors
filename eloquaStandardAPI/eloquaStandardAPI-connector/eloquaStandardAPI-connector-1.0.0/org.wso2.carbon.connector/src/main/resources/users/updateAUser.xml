<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

    WSO2 Inc. licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file except
    in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
-->
<template name="updateAUser" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="name" description="The name of the user to update the name as it is."/>
    <parameter name="userId" description="Unique identifier of the user."/>
    <parameter name="loginName" description="Username of the user to login."/>
    <parameter name="company" description="Company name of the user."/>
    <parameter name="emailAddress" description="Email address of the user."/>
    <parameter name="loggedInAt" description="Integer value, this indicates where the user logged in."/>
    <parameter name="preferences"
               description="User preferences object, this will contain timezoneId and isMasterViewDocked properties."/>
    <parameter name="typePermissions" description="List of type permission objects."/>
    <parameter name="capabilities" description="List of string values."/>
    <parameter name="betaAccess" description="List of string values."/>
    <parameter name="defaultContactViewId" description="The default view id of Contacts."/>
    <parameter name="defaultAccountViewId" description="The default view id of Accounts."/>
    <parameter name="interfacePermissions" description="List of interfacePermission objects."/>
    <parameter name="productPermissions" description="List of productPermission objects."/>
    <sequence>
        <property name="uri.var.name" expression="$func:name"/>
        <property name="uri.var.userId" expression="$func:userId"/>
        <property name="uri.var.loginName" expression="$func:loginName"/>
        <property name="uri.var.company" expression="$func:company"/>
        <property name="uri.var.emailAddress" expression="$func:emailAddress"/>
        <property name="uri.var.loggedInAt" expression="$func:loggedInAt"/>
        <property name="uri.var.preferences" expression="$func:preferences"/>
        <property name="uri.var.typePermissions" expression="$func:typePermissions"/>
        <property name="uri.var.capabilities" expression="$func:capabilities"/>
        <property name="uri.var.betaAccess" expression="$func:betaAccess"/>
        <property name="uri.var.defaultContactViewId" expression="$func:defaultContactViewId"/>
        <property name="uri.var.defaultAccountViewId" expression="$func:defaultAccountViewId"/>
        <property name="uri.var.interfacePermissions" expression="$func:interfacePermissions"/>
        <property name="uri.var.productPermissions" expression="$func:productPermissions"/>
        <script language="js">
            <![CDATA[
            var name = mc.getProperty('uri.var.name');
            var encodedName = encodeURIComponent(name);
            mc.setProperty('uri.var.name', encodedName);
            ]]>
        </script>
        <payloadFactory media-type="json">
            <format>
                {
                "name":"$1"
                }
            </format>
            <args>
                <arg expression="get-property('uri.var.name')"/>
            </args>
        </payloadFactory>
        <script language="js">
            <![CDATA[
            var payload = mc.getPayloadJSON();
            var company = mc.getProperty('uri.var.company');
            var emailAddress = mc.getProperty('uri.var.emailAddress');
            var loggedInAt = mc.getProperty('uri.var.loggedInAt');
            var preferences = mc.getProperty('uri.var.preferences');
            var capabilities = mc.getProperty('uri.var.capabilities');
            var defaultContactViewId = mc.getProperty('uri.var.defaultContactViewId');
            var defaultAccountViewId = mc.getProperty('uri.var.defaultAccountViewId');
            var interfacePermissions = mc.getProperty('uri.var.interfacePermissions');
            var productPermissions = mc.getProperty('uri.var.productPermissions');
            var betaAccess = mc.getProperty('uri.var.betaAccess');
            var typePermissions = mc.getProperty('uri.var.typePermissions');
            if(interfacePermissions != null && interfacePermissions!="" && interfacePermissions!="[]")
            {
            var allTestedInterfacePermissions = new Array();
            var txt = '{"interfacePermissionsList":'+interfacePermissions+"}";
            var obj = eval("("+txt+")");
                 for (i = 0; i < obj.interfacePermissionsList.length; ++i) {
                interfacePermissionObject = new Object();
                testedInterfacePermissionObject = new Object();
                interfacePermissionObject = obj.interfacePermissionsList[i];
                    for(var interfacePermissionKey in interfacePermissionObject) {
                    var innerInterfacePermissionObject = new Object();
                    innerInterfacePermissionObject= interfacePermissionObject[interfacePermissionKey];
                    if(interfacePermissionKey == "nestedInterfacePermissions")
                        {
                            var testedNestedInterfacePermissions = new Array();
                            for (j = 0; j < innerInterfacePermissionObject.length; ++j) {
                            nestedInterfacePermissionObject = new Object();
                            nestedInterfacePermissionsObject = new Object();
                            nestedInterfacePermissionObject = innerInterfacePermissionObject[j];
                                for(var key in nestedInterfacePermissionObject) {
                                    if(nestedInterfacePermissionObject[key] != null && nestedInterfacePermissionObject[key]!="")
                                    {
                                    nestedInterfacePermissionsObject[key] = nestedInterfacePermissionObject[key];
                                    }
                                }
                            testedNestedInterfacePermissions[j] = nestedInterfacePermissionsObject;
                            }
                            testedInterfacePermissionObject[interfacePermissionKey]=testedNestedInterfacePermissions;
                        }
                        else{
                        testedInterfacePermissionObject[interfacePermissionKey] = interfacePermissionObject[interfacePermissionKey];
                        }
                    }
                    allTestedInterfacePermissions[i]=  testedInterfacePermissionObject;
                }
                payload["interfacePermissions"] = allTestedInterfacePermissions;
            }
            if(betaAccess != null && betaAccess!="" && betaAccess!="[]")
            {
            var betaAccessArray = betaAccess.replace("[","").replace("]","").replace("\"","").split(",");
            var testedBetaAccess = new Array();
            for (i = 0; i < betaAccessArray.length; ++i) {
                if(betaAccessArray[i] != null && betaAccessArray[i]!="")
                    {
                        testedBetaAccess[i] = betaAccessArray[i];
                    }
            }
            payload["betaAccess"] = testedBetaAccess;
            }
            if(capabilities != null && capabilities!="" && capabilities!="[]")
            {
            var capabilitiesArray = capabilities.replace("[","").replace("]","").replace("\"","").split(",");
            var testedCapabilities = new Array();
            for (i = 0; i < capabilitiesArray.length; ++i) {
                if(capabilitiesArray[i] != null && capabilitiesArray[i]!="")
                    {
                        testedCapabilities[i] = capabilitiesArray[i];
                    }
            }
            payload["capabilities"] = testedCapabilities;
            }
            if(productPermissions != null && productPermissions!="" && productPermissions!="[]")
            {
            var testedProductPermissions = new Array();
            var txt = '{"productPermissionsList":'+productPermissions+"}";
            var obj = eval("("+txt+")");
            for (i = 0; i < obj.productPermissionsList.length; ++i) {
                productPermissionObject = new Object();
                productPermissionsObject = new Object();
                productPermissionObject = obj.productPermissionsList[i];
                for(var key in productPermissionObject) {
                    if(productPermissionObject[key] != null && productPermissionObject[key]!="")
                    {
                    productPermissionsObject[key] = productPermissionObject[key];
                    }
                }
                testedProductPermissions[i] = productPermissionsObject;
            }
            payload["productPermissions"] = testedProductPermissions;
            }
            if(typePermissions != null && typePermissions!="" && typePermissions!="[]")
            {
            var testedTypePermissions = new Array();
            var txt = '{"typePermissionsList":'+typePermissions+"}";
            var obj = eval("("+txt+")");
            for (i = 0; i < obj.typePermissionsList.length; ++i) {
                typePermissionObject = new Object();
                typePermissionsObject = new Object();
                typePermissionObject = obj.typePermissionsList[i];
                for(var key in typePermissionObject) {
                    if(typePermissionObject[key] != null && typePermissionObject[key]!="")
                    {
                    typePermissionsObject[key] = typePermissionObject[key];
                    }
                }
                testedTypePermissions[i] = typePermissionsObject;
            }
            payload["typePermissions"] = testedTypePermissions;
            }
            if(company != null && company!="")
            {
            payload["company"] = company;
            }
            if(emailAddress != null && emailAddress!="")
            {
            payload["emailAddress"] = emailAddress;
            }
            if(loggedInAt != null && loggedInAt!="")
            {
            payload["loggedInAt"] = loggedInAt;
            }
            if(preferences != null && preferences!="" && preferences!="[]")
            {
                var testedPreferences = new Object();
                var txt = '{"preferencesObject":'+preferences+"}";
                var obj = eval("("+txt+")");
                for(var key in obj.preferencesObject) {
                    if(obj.preferencesObject[key] != null && obj.preferencesObject[key]!="")
                    {
                        testedPreferences[key] = obj.preferencesObject[key];
                    }
                }
                payload["preferences"] = testedPreferences;
            }
            if(defaultAccountViewId != null && defaultAccountViewId!="")
            {
            payload["defaultAccountViewId"] = defaultAccountViewId;
            }
            if(defaultContactViewId != null && defaultContactViewId!="")
            {
            payload["defaultContactViewId"] = defaultContactViewId;
            }
            mc.setPayloadJSON(payload);
            ]]>
        </script>
        <property name="Content-Type" value="application/json" scope="transport"/>
        <call>
            <endpoint>
                <http method="PUT"
                      uri-template="{uri.var.apiUrl}system/user/{uri.var.userId}"/>
            </endpoint>
        </call>
    </sequence>
</template>