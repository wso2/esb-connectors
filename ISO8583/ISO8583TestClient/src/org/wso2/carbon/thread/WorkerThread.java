package org.wso2.carbon.thread;

import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;



public class WorkerThread implements Runnable {

	 ArrayList<String> list = new ArrayList<String>();
	    Socket clientSocket;
	    private final int MY_PORT = 5000;
	    private final String TargetHost = "localhost";
	    DataOutputStream outToServer;

    public WorkerThread(String s) throws  IOException{
    	clientSocket = new Socket(TargetHost, MY_PORT);
        outToServer = new DataOutputStream(clientSocket.getOutputStream());
    }

    @Override
    public void run() {
        System.out.println(Thread.currentThread().getName());
        try {
        	processRequest();
		} catch (IOException e) {
			System.out.println("Couldn't load the requests");
		}
        System.out.println(Thread.currentThread().getName()+" End.");
    }

    private void processRequest() throws IOException {
        try {
//            Thread.sleep(5000);
            while (clientSocket.isConnected() && clientSocket.getInputStream()!=null) {
                list.add("0200723A00010A80840018593600141001099999011000000010000000100702153300000119153310061007065656561006090102240000000901360020100236C0102240000000");
                list.add("0200B220000100100000000000000002000020134500000050000001115221801234890610000914XYRTUI5269TYUI021ABCDEFGHIJ 1234567890");
                list.add("0200B220000100100000000000000002000020134500000050000001115221801234890610000914XYRTUI5269TYUI032SDFGHJKIOL 1234567890 9876543210");
                list.add("0200723A00010A80840018593600141001099999011000000010000000100702153300000119153310061007065656561006090102240000000901360020100236C0102240000000");
                list.add("0200B220000100100000000000000002000020134500000050000001115221801234890610000914XYRTUI5269TYUI021ABCDEFGHIJ 1234567890");
                list.add("0200B220000100100000000000000002000020134500000050000001115221801234890610000914XYRTUI5269TYUI032SDFGHJKIOL 1234567890 9876543210");
                list.add("0200B220000100100000000000000002000020134500000050000001115221801234890610000914XYRTUI5269TYUI021ABCDEFGHIJ 1234567890");
                list.add("0200B220000100100000000000000002000020134500000050000001115221801234890610000914XYRTUI5269TYUI021ABCDEFGHIJ 1234567890");
                list.add("0200B220000100100000000000000002000020134500000050000001115221801234890610000914XYRTUI5269TYUI032SDFGHJKIOL 1234567890 9876543210");
                list.add("0200723A00010A80840018593600141001099999011000000010000000100702153300000119153310061007065656561006090102240000000901360020100236C0102240000000");
                list.add("0200B220000100100000000000000002000020134500000050000001115221801234890610000914XYRTUI5269TYUI021ABCDEFGHIJ 1234567890");
                list.add("0200B220000100100000000000000002000020134500000050000001115221801234890610000914XYRTUI5269TYUI032SDFGHJKIOL 1234567890 9876543210");
                list.add("0200B220000100100000000000000002000020134500000050000001115221801234890610000914XYRTUI5269TYUI021ABCDEFGHIJ 1234567890");
                list.add("0200723A00010A80840018593600141001099999011000000010000000100702153300000119153310061007065656561006090102240000000901360020100236C0102240000000");
                list.add("0200B220000100100000000000000002000020134500000050000001115221801234890610000914XYRTUI5269TYUI021ABCDEFGHIJ 1234567890");
                list.add("0200B220000100100000000000000002000020134500000050000001115221801234890610000914XYRTUI5269TYUI032SDFGHJKIOL 1234567890 9876543210");
                list.add("0200723A00010A80840018593600141001099999011000000010000000100702153300000119153310061007065656561006090102240000000901360020100236C0102240000000");
                list.add("0200B220000100100000000000000002000020134500000050000001115221801234890610000914XYRTUI5269TYUI021ABCDEFGHIJ 1234567890");
                list.add("0200B220000100100000000000000002000020134500000050000001115221801234890610000914XYRTUI5269TYUI032SDFGHJKIOL 1234567890 9876543210");
                list.add("0200B220000100100000000000000002000020134500000050000001115221801234890610000914XYRTUI5269TYUI021ABCDEFGHIJ 1234567890");
                list.add("0200723A00010A80840018593600141001099999011000000010000000100702153300000119153310061007065656561006090102240000000901360020100236C0102240000000");
                list.add("0200B220000100100000000000000002000020134500000050000001115221801234890610000914XYRTUI5269TYUI021ABCDEFGHIJ 1234567890");
                list.add("0200B220000100100000000000000002000020134500000050000001115221801234890610000914XYRTUI5269TYUI032SDFGHJKIOL 1234567890 9876543210");
                list.add("0200723A00010A80840018593600141001099999011000000010000000100702153300000119153310061007065656561006090102240000000901360020100236C0102240000000");
                list.add("0200B220000100100000000000000002000020134500000050000001115221801234890610000914XYRTUI5269TYUI021ABCDEFGHIJ 1234567890");
                list.add("0200B220000100100000000000000002000020134500000050000001115221801234890610000914XYRTUI5269TYUI032SDFGHJKIOL 1234567890 9876543210");
                list.add("0200B220000100100000000000000002000020134500000050000001115221801234890610000914XYRTUI5269TYUI021ABCDEFGHIJ 1234567890");
                String listString = "";
                for (String s : list) {
                    listString += s + "\n";
                }
                System.out.println(listString);
                outToServer.writeBytes(listString);
                break;
            }
        } catch (IOException ioe) {
            System.out.println("Error:" + ioe);
        } catch (Exception e) {
            System.out.println("Error:" + e);
        }
    }
    
}