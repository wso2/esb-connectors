package org.wso2.carbon.inbound.iso8583.listening;

import java.io.IOException;
import java.net.ServerSocket;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.core.SynapseEnvironment;
import org.apache.synapse.inbound.InboundProcessorParams;

public class ServerDemo extends Thread
{
    private static final Log log = LogFactory.getLog(ServerDemo.class);

	 private int port;;//Arbitrary port number
	private static ServerSocket server;
    private  String onErrorSeq;
    private  boolean sequential;
    private  SynapseEnvironment synapseEnvironment;
    private String injectingSeq;
    protected String name;

    protected InboundProcessorParams params;

 public ServerDemo(int port,InboundProcessorParams params){
	 this.port=port;
	 this.injectingSeq = params.getInjectingSeq();
     this.onErrorSeq = params.getOnErrorSeq();
     this.name = params.getName();
     this.synapseEnvironment = params.getSynapseEnvironment();
    this.params =params;
	 
 }
 	public void run() {
		
		boolean listening = true;
 
		try {
			server = new ServerSocket(port);
		} catch (IOException e) {
			log.error("Could not listen on port: " + port,e);
//			System.exit(-1);
		}
 
		while (listening) {
			handleClientRequest(server,params);
		}
 
		server.close();
	}
 
	private void handleClientRequest(ServerSocket server,InboundProcessorParams params) {
		try {
			new ConnectionRequestHandler(server.accept(),params,port).run();
		} catch (IOException e) {
			log.error("Could not establish the connection",e);
		}
	}
}