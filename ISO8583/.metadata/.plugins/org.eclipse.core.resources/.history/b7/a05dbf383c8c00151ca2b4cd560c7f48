package org.wso2.carbon.inbound.iso8583.listening;

import java.io.DataInputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.core.SynapseEnvironment;
import org.jpos.iso.ISOException;
import org.jpos.iso.ISOMsg;
import org.jpos.iso.ISOPackager;

public class CreateConnection extends Thread {
	private static final Log log = LogFactory.getLog(CreateConnection.class);
	private Socket connection;
    public static DataInputStream inputstreamreader;
    ISOPackager packager;
    private String injectingSeq;
    private ISO8583MessageInject msgInject;
    private  String onErrorSeq;
    private  boolean sequential;
    private  SynapseEnvironment synapseEnvironment;
    private static ServerSocket server;

     public CreateConnection(Socket connection,int port,String injectingSeq, String onErrorSeq, boolean sequential,
             SynapseEnvironment synapseEnvironment) throws ISOException {
         this.packager = ISO8583PackagerFactory.getPackager();
         this.injectingSeq = injectingSeq;
         this.onErrorSeq = onErrorSeq;
         this.sequential = sequential;
         this.synapseEnvironment = synapseEnvironment;
         this.msgInject = new ISO8583MessageInject(injectingSeq, onErrorSeq, sequential,
                 synapseEnvironment);
     }
     
     public void run() {
		             try{
			             connection = server.accept();
			             log.info("There is a client connected on port :" + port);
			             inputstreamreader = new DataInputStream(connection.getInputStream());
			             receiveMessage();
		         } catch (IOException e) {
		             log.error("problem while establish the connection", e);
		         } catch (ISOException e) {
					// TODO Auto-generated catch block
					log.error("error in receiving message",e);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} finally {
		             try {
		              connection.close();
		              log.info("client disconnect the connection");
		             } catch (IOException e) {
		                 log.info("Couldn't close a socket, what's going on?");
		             }
		             log.info("Connection with client closed");
		         }
     }

     public void receiveMessage() throws ISOException, Exception {
         while (connection.getInputStream() != null) {        		
 	            String fromclient = inputstreamreader.readLine();
 	            unpackRequest(fromclient);   
         }
     }

     /**
      * Unpack the STRING ISO8583 Messages.
      * 
      */
     public void unpackRequest(String message) throws ISOException, Exception {
         try {
             ISOMsg isoMsg = new ISOMsg();
             isoMsg.setPackager(packager);
             isoMsg.unpack(message.getBytes());
             injectISO8583Message(isoMsg);
         } catch (ISOException e) {
         	log.info(message);
             log.error("Message is not in ISO8583 standard", e);
         }
     }

     public ISOMsg injectISO8583Message(ISOMsg isomsg) {
         if (injectingSeq != null) {
             msgInject.inject(isomsg, ISO8583Constant.MESSAGE_FORMAT);
         } else {
             log.info("The Sequence is not found");
         }
         return null;
     }


}
