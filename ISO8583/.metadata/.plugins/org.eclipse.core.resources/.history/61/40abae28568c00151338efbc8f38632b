package org.wso2.carbon.inbound.iso8583.listening;

import java.io.DataInputStream;
import java.io.IOException;
import java.net.Socket;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseException;
import org.apache.synapse.core.SynapseEnvironment;
import org.apache.synapse.inbound.InboundProcessorParams;
import org.jpos.iso.ISOException;
import org.jpos.iso.ISOMsg;
import org.jpos.iso.ISOPackager;

	public class ConnectionRequestHandler implements Runnable{
	    private static final Log log = LogFactory.getLog(ConnectionRequestHandler.class);
		private Socket connection;
	    public static DataInputStream inputstreamreader;
	    private  String onErrorSeq;
	    private  boolean sequential;
	    private  SynapseEnvironment synapseEnvironment;
	    private String injectingSeq;
	    protected InboundProcessorParams params;
	    protected String name;
	    private int port;
	    ISOPackager packager;
	    private ISO8583MessageInject msgInject;


		public ConnectionRequestHandler(Socket connection,InboundProcessorParams params,int port) throws ISOException {
			this.port= port;
			this.connection = connection;
			this.injectingSeq = params.getInjectingSeq();
	        this.onErrorSeq = params.getOnErrorSeq();
	        this.name = params.getName();
	        this.synapseEnvironment = params.getSynapseEnvironment();
	       this.params =params;
	       this.packager = ISO8583PackagerFactory.getPackager();
	       this.msgInject = new ISO8583MessageInject(injectingSeq, onErrorSeq, sequential,
	                synapseEnvironment);
		}

		public void run() {
			log.info("Client connected to socket: " + connection.toString());
			try {
	            inputstreamreader = new DataInputStream(connection.getInputStream());
				 while (connection.getInputStream() != null) {        		
			            String fromclient = inputstreamreader.readLine();
//			            ISO8583MessageConsumer isomsg = new ISO8583MessageConsumer(params);	
//			            isomsg.unpackRequest(fromclient); 
			            unpackRequest(fromclient); 
//			            
				 }
			} catch (IOException ioe) {
				log.error("Error while read the message",ioe);
			} catch (ISOException isoe) {
				log.error("Error while unpack the request",isoe);
			} catch (Exception e) {
				log.info("There is an error with the connection",e);
			} finally { //In case anything goes wrong we need to close our I/O streams and sockets.
				try {
					inputstreamreader.close();
					connection.close();
				} catch(Exception e) { 
					log.error("Couldn't close I/O streams",e);
				}
			}
		}
		 public void unpackRequest(String message) throws ISOException, Exception {
		        try {
		            ISOMsg isoMsg = new ISOMsg();
		            isoMsg.setPackager(packager);
		            isoMsg.unpack(message.getBytes());
		            injectISO8583Message(isoMsg);
		        } catch (ISOException e) {
		        	log.info(message);
		            log.error("Message is not in ISO8583 standard", e);
		        }
		    }

		    public ISOMsg injectISO8583Message(ISOMsg isomsg) {
		        if (injectingSeq != null) {
		            msgInject.inject(isomsg, ISO8583Constant.MESSAGE_FORMAT);
		        } else {
		            handleException("The Sequence is not found");
		        }
		        return null;
		    }
		    private void handleException(String msg) {
		        log.error(msg);
		        throw new SynapseException(msg);
		    }

	}
