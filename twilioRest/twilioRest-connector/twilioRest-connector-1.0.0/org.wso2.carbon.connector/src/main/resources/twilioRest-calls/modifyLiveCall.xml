<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (c) 2005-2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

   WSO2 Inc. licenses this file to you under the Apache License,
   Version 2.0 (the "License"); you may not use this file except
   in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied. See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<!-- API Documentation URL -  https://www.twilio.com/docs/api/rest/change-call-state -->
<template name="modifyLiveCall" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="callSid" description="The identifier of the call you want to modify."/>
    <parameter name="url" description="The fully qualified URL where the call should be redirected." />
    <parameter name="method" description=" The HTTP method, GET or POST, to use when connecting to the URL. Defaults to POST. " />
    <parameter name="status" description=" Either canceled or completed. Specifying canceled will attempt to hang up calls that are queued or ringing but not affect calls already in progress.
                                            Specifying completed will attempt to hang up a call even if it's already in progress. " />
    <parameter name="fallbackUrl" description=" A URL that Twilio will request if an error occurs when requests are made to the URL." />
    <parameter name="fallbackMethod" description=" The HTTP method, either GET or POST, that should be used to request the fallback URL. Defaults to POST." />
    <parameter name="statusCallback" description=" The URL that Twilio will request when the call ends to notify your application." />
    <parameter name="statusCallbackMethod" description=" The HTTP method, either GET or POST, that should be used to request the status callback URL. Defaults to POST." />

    <sequence>
        <property name="uri.var.callSid" expression="$func:callSid" />
        <property name="uri.var.url" expression="$func:url" />
        <property name="uri.var.method" expression="$func:method" />
        <property name="uri.var.status" expression="$func:status" />
        <property name="uri.var.fallbackUrl" expression="$func:fallbackUrl" />
        <property name="uri.var.fallbackMethod" expression="$func:fallbackMethod" />
        <property name="uri.var.statusCallback" expression="$func:statusCallback" />
        <property name="uri.var.statusCallbackMethod" expression="$func:statusCallbackMethod" />


        <payloadFactory media-type="json">
            <format>
                {
                    "sid":"$1"
                }
            </format>
            <args>
                <arg expression="get-property('uri.var.callSid')"/>
            </args>
        </payloadFactory>
        <script language="js">
            <![CDATA[
                //request body param variables
                var url = mc.getProperty('uri.var.url');
                var method = mc.getProperty('uri.var.method');
                var status = mc.getProperty('uri.var.status');
                var fallbackUrl = mc.getProperty('uri.var.fallbackUrl');
                var fallbackMethod = mc.getProperty('uri.var.fallbackMethod');
                var statusCallback = mc.getProperty('uri.var.statusCallback');
                var statusCallbackMethod = mc.getProperty('uri.var.statusCallbackMethod');

                //Get the existing payload
                var payload = mc.getPayloadJSON();
                if (url != null && url != "") {
                   payload["Url"]=url;
                }

                if (method != null && method != "") {
                   payload["method"]=method;
                }

                if(status != null && status != ""){
                    payload["Status"]=status;
                }

                if(fallbackUrl != null && fallbackUrl != ""){
                    payload["FallbackUrl"]=fallbackUrl;
                }

                if(fallbackMethod != null && fallbackMethod != ""){
                    payload["FallbackMethod"]=fallbackMethod;
                }

                if(statusCallback != null && statusCallback != ""){
                    payload["StatusCallback"]=statusCallback;
                }

                if(statusCallbackMethod != null && statusCallbackMethod != ""){
                    payload["StatusCallbackMethod"]=statusCallbackMethod;
                }

                //Set the newly constructed payload
                mc.setPayloadJSON(payload);
            ]]>
        </script>

        <property name="messageType" value="application/x-www-form-urlencoded" scope="axis2"/>
        <property name="FORCE_POST_PUT_NOBODY" value="true" scope="axis2" type="BOOLEAN"/>

        <call>
            <endpoint>
                <http method="post" uri-template="{uri.var.apiUrl}/{uri.var.apiVersion}/Accounts/{uri.var.accountSid}/Calls/{uri.var.callSid}.json" />
            </endpoint>
        </call>
        <!--Removing custom headers from the Response. -->
        <header name="X-Frame-Options" action="remove" scope="transport" />
        <header name="Vary" action="remove" scope="transport" />
        <header name="X-XSS-Protection" action="remove" scope="transport" />
        <header name="X-Content-Type-Options" action="remove" scope="transport" />
        <header name="Strict-Transport-Security" action="remove" scope="transport" />
        <header name="X-RateLimit-Remaining" action="remove" scope="transport" />
        <header name="X-RateLimit-Limit" action="remove" scope="transport" />
        <header name="X-RateLimit-Reset" action="remove" scope="transport" />
    </sequence>
</template>