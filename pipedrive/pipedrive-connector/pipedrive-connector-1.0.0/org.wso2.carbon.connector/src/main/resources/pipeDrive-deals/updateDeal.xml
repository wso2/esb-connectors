<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

   WSO2 Inc. licenses this file to you under the Apache License,
   Version 2.0 (the "License"); you may not use this file except
   in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<!-- API Document URL https://developers.pipedrive.com/v1 -->
<template name="updateDeal" xmlns="http://ws.apache.org/ns/synapse">
   <parameter name="id" description="The identifier of the deal to be updated" />
   <parameter name="title" description="The title of the deal" />
   <parameter name="value" description="The value of teh deal" />
   <parameter name="currency" description="The currency of the deal. Accepts a 3-character currency code" />
   <parameter name="userId" description="The Identifier of the user who will be marked as the owner of this deal" />
   <parameter name="personId" description="The Identifier of the person this deal will be associated with" />
   <parameter name="organizationId" description="The Identifier of the organization, the deal will be associated with" />
   <parameter name="stageId" description="The Identifier of the stage this deal will be placed in a pipeline" />
   <parameter name="status" description="The status of the deal, possible values are Open, Won, Lost and Deleted" />
   <parameter name="lostReason" description="The message about why the deal was lost, only to be used when the status is Lost" />
   <parameter name="visibility"
      description="Visibility of the deal. If omitted, visibility will not be changed, possible values are 0,1 and 2" />
   <parameter name="customFields"
      description="JSON Object specifying the values for the deal's custom fields created in the account, keys for the object are the 40-character hashes assigned for the respective custom fields" />
   <parameter name="prettyOutput" description="If the prettyOutput is specified as 1, will return an indented response of the output" />
   <parameter name="fields" description="The array of fileds to be returned in the output" />
   <sequence>
      <property name="uri.var.id" expression="$func:id" />
      <property name="uri.var.title" expression="$func:title" />
      <property name="uri.var.value" expression="$func:value" />
      <property name="uri.var.currency" expression="$func:currency" />
      <property name="uri.var.userId" expression="$func:userId" />
      <property name="uri.var.personId" expression="$func:personId" />
      <property name="uri.var.organizationId" expression="$func:organizationId" />
      <property name="uri.var.stageId" expression="$func:stageId" />
      <property name="uri.var.status" expression="$func:status" />
      <property name="uri.var.lostReason" expression="$func:lostReason" />
      <property name="uri.var.visibility" expression="$func:visibility" />
      <property name="uri.var.customFields" expression="$func:customFields" />
      <property name="uri.var.prettyOutput" expression="$func:prettyOutput" />
      <property name="uri.var.fields" expression="$func:fields" />
      <!-- Generate the request payload with mandatory parameters -->
      <payloadFactory media-type="json">
         <format>
            {}
         </format>
         <args>
         </args>
      </payloadFactory>
      <script language="js">
         <![CDATA[ 
            // Generate payload with optional parameters
            var title = mc.getProperty('uri.var.title');
            var value = mc.getProperty('uri.var.value');
            var currency = mc.getProperty('uri.var.currency');
            var userId = mc.getProperty('uri.var.userId');
            var personId = mc.getProperty('uri.var.personId');
            var organizationId = mc.getProperty('uri.var.organizationId');
            var stageId = mc.getProperty('uri.var.stageId');
            var status = mc.getProperty('uri.var.status');
            var lostReason = mc.getProperty('uri.var.lostReason');
            var visibility = mc.getProperty('uri.var.visibility');
            var customFields = mc.getProperty('uri.var.customFields');
            var prettyOutPut = mc.getProperty('uri.var.prettyOutput');
            var fields = mc.getProperty('uri.var.fields');
            var urlQuery = mc.getProperty('uri.var.urlQuery');
            if (prettyOutPut != null && prettyOutPut != '') {
               urlQuery += '&pretty_output=' + prettyOutPut;
               mc.setProperty('uri.var.urlQuery', urlQuery);
            }
            // Retrieve payload to set custom properties
            payload = mc.getPayloadJSON();
            if (title != null && title != "") {
               payload.title = title;
            }
            if (value != null && value != "") {
               payload.value = value;
            }
            if (currency != null && currency != "") {
               payload.currency = currency;
            }
            if (userId != null && userId != "") {
               payload.user_id = userId;
            }
            if (personId != null && personId != "") {
               payload.person_id = personId;
            }
            if (organizationId != null && organizationId != "") {
               payload.org_id = organizationId;
            }
            if (stageId != null && stageId != "") {
               payload.stage_id = stageId;
            }
            if (status != null && status != "") {
               payload.status = status;
            }
            if (lostReason != null && lostReason != "") {
               payload.lost_reason = lostReason;
            }
            if (visibility != null && visibility != "") {
               payload.visible_to = visibility;
            }
            // Retrieves values from customFields object and appends as key values pairs to the payload            
            if (customFields != null && customFields != "") {
               var customFieldsObj = eval("(" + customFields + ")");
               for (var key in customFieldsObj) {
                  if (key != null && key != "") {
                     // Added toString to avoid trailing 0's being appended to integers
                     payload[key] = customFieldsObj[key].toString();   
                  }
               }
            }
            mc.setPayloadJSON(payload);     
            if (fields != null && fields != "") {
               var fieldsList = '';
               var fieldsArray = eval('(' + fields + ')');
               for (var i = 0; i < fieldsArray.length; i++) {
                  fieldsList += fieldsArray[i] + ',';
               }
               if (fieldsList != '') {
                  //Remove unwanted comma at the end
                  fieldsList = ':(' + fieldsList.substring(0, fieldsList.length - 1) + ')';
                  mc.setProperty('uri.var.filter', fieldsList);
               }
            }   
         ]]>
      </script>
      <call>
         <endpoint>
            <http method="put" uri-template="{uri.var.apiUrl}deals{+uri.var.filter}/{+uri.var.id}{+uri.var.urlQuery}" />
         </endpoint>
      </call>
      <!-- Remove response custom header information -->
      <header name="X-Frame-Options" scope="transport" action="remove" />
      <header name="Vary" scope="transport" action="remove" />
      <header name="X-XSS-Protection" scope="transport" action="remove" />
      <header name="Access-Control-Allow-Origin" scope="transport" action="remove" />
   </sequence>
</template>